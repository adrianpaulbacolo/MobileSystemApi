//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace W88.WebRef.svcPayDeposit {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepositSource", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    public enum DepositSource : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberSite = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Affiliate = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WAP = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="YingBaoAliPayCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class YingBaoAliPayCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EyPalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EyPalTime {
            get {
                return this.EyPalTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EyPalTimeField, value) != true)) {
                    this.EyPalTimeField = value;
                    this.RaisePropertyChanged("EyPalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpState {
            get {
                return this.OpStateField;
            }
            set {
                if ((object.ReferenceEquals(this.OpStateField, value) != true)) {
                    this.OpStateField = value;
                    this.RaisePropertyChanged("OpState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderIdField, value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNo {
            get {
                return this.OrderNoField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNoField, value) != true)) {
                    this.OrderNoField = value;
                    this.RaisePropertyChanged("OrderNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Partner {
            get {
                return this.PartnerField;
            }
            set {
                if ((object.ReferenceEquals(this.PartnerField, value) != true)) {
                    this.PartnerField = value;
                    this.RaisePropertyChanged("Partner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayAmount {
            get {
                return this.PayAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.PayAmountField, value) != true)) {
                    this.PayAmountField = value;
                    this.RaisePropertyChanged("PayAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayType {
            get {
                return this.PayTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PayTypeField, value) != true)) {
                    this.PayTypeField = value;
                    this.RaisePropertyChanged("PayType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeePayCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class HeePayCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Agent_Bill_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Agent_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JNet_Bill_NoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Pay_AmtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Pay_MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Pay_TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Agent_Bill_ID {
            get {
                return this.Agent_Bill_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Agent_Bill_IDField, value) != true)) {
                    this.Agent_Bill_IDField = value;
                    this.RaisePropertyChanged("Agent_Bill_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Agent_ID {
            get {
                return this.Agent_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Agent_IDField, value) != true)) {
                    this.Agent_IDField = value;
                    this.RaisePropertyChanged("Agent_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JNet_Bill_No {
            get {
                return this.JNet_Bill_NoField;
            }
            set {
                if ((object.ReferenceEquals(this.JNet_Bill_NoField, value) != true)) {
                    this.JNet_Bill_NoField = value;
                    this.RaisePropertyChanged("JNet_Bill_No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pay_Amt {
            get {
                return this.Pay_AmtField;
            }
            set {
                if ((object.ReferenceEquals(this.Pay_AmtField, value) != true)) {
                    this.Pay_AmtField = value;
                    this.RaisePropertyChanged("Pay_Amt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pay_Message {
            get {
                return this.Pay_MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.Pay_MessageField, value) != true)) {
                    this.Pay_MessageField = value;
                    this.RaisePropertyChanged("Pay_Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pay_Type {
            get {
                return this.Pay_TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.Pay_TypeField, value) != true)) {
                    this.Pay_TypeField = value;
                    this.RaisePropertyChanged("Pay_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DPWeChatCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DPWeChatCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Bank_Seq_NoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Extra_Return_ParamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Interface_VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Merchant_CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Notify_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Notify_TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Order_AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Order_NoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Order_TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Sign_TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_NoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bank_Seq_No {
            get {
                return this.Bank_Seq_NoField;
            }
            set {
                if ((object.ReferenceEquals(this.Bank_Seq_NoField, value) != true)) {
                    this.Bank_Seq_NoField = value;
                    this.RaisePropertyChanged("Bank_Seq_No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extra_Return_Param {
            get {
                return this.Extra_Return_ParamField;
            }
            set {
                if ((object.ReferenceEquals(this.Extra_Return_ParamField, value) != true)) {
                    this.Extra_Return_ParamField = value;
                    this.RaisePropertyChanged("Extra_Return_Param");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Interface_Version {
            get {
                return this.Interface_VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.Interface_VersionField, value) != true)) {
                    this.Interface_VersionField = value;
                    this.RaisePropertyChanged("Interface_Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Merchant_Code {
            get {
                return this.Merchant_CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.Merchant_CodeField, value) != true)) {
                    this.Merchant_CodeField = value;
                    this.RaisePropertyChanged("Merchant_Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notify_Id {
            get {
                return this.Notify_IdField;
            }
            set {
                if ((object.ReferenceEquals(this.Notify_IdField, value) != true)) {
                    this.Notify_IdField = value;
                    this.RaisePropertyChanged("Notify_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notify_Type {
            get {
                return this.Notify_TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.Notify_TypeField, value) != true)) {
                    this.Notify_TypeField = value;
                    this.RaisePropertyChanged("Notify_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Order_Amount {
            get {
                return this.Order_AmountField;
            }
            set {
                if ((object.ReferenceEquals(this.Order_AmountField, value) != true)) {
                    this.Order_AmountField = value;
                    this.RaisePropertyChanged("Order_Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Order_No {
            get {
                return this.Order_NoField;
            }
            set {
                if ((object.ReferenceEquals(this.Order_NoField, value) != true)) {
                    this.Order_NoField = value;
                    this.RaisePropertyChanged("Order_No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Order_Time {
            get {
                return this.Order_TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.Order_TimeField, value) != true)) {
                    this.Order_TimeField = value;
                    this.RaisePropertyChanged("Order_Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign_Type {
            get {
                return this.Sign_TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.Sign_TypeField, value) != true)) {
                    this.Sign_TypeField = value;
                    this.RaisePropertyChanged("Sign_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_No {
            get {
                return this.Trade_NoField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_NoField, value) != true)) {
                    this.Trade_NoField = value;
                    this.RaisePropertyChanged("Trade_No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_Status {
            get {
                return this.Trade_StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_StatusField, value) != true)) {
                    this.Trade_StatusField = value;
                    this.RaisePropertyChanged("Trade_Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_Time {
            get {
                return this.Trade_TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_TimeField, value) != true)) {
                    this.Trade_TimeField = value;
                    this.RaisePropertyChanged("Trade_Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TongHuiPayCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class TongHuiPayCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Merchant_CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Notify_TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Order_AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Order_NoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Order_TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Return_ParamsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_NoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Merchant_Code {
            get {
                return this.Merchant_CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.Merchant_CodeField, value) != true)) {
                    this.Merchant_CodeField = value;
                    this.RaisePropertyChanged("Merchant_Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notify_Type {
            get {
                return this.Notify_TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.Notify_TypeField, value) != true)) {
                    this.Notify_TypeField = value;
                    this.RaisePropertyChanged("Notify_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Order_Amount {
            get {
                return this.Order_AmountField;
            }
            set {
                if ((object.ReferenceEquals(this.Order_AmountField, value) != true)) {
                    this.Order_AmountField = value;
                    this.RaisePropertyChanged("Order_Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Order_No {
            get {
                return this.Order_NoField;
            }
            set {
                if ((object.ReferenceEquals(this.Order_NoField, value) != true)) {
                    this.Order_NoField = value;
                    this.RaisePropertyChanged("Order_No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Order_Time {
            get {
                return this.Order_TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.Order_TimeField, value) != true)) {
                    this.Order_TimeField = value;
                    this.RaisePropertyChanged("Order_Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Return_Params {
            get {
                return this.Return_ParamsField;
            }
            set {
                if ((object.ReferenceEquals(this.Return_ParamsField, value) != true)) {
                    this.Return_ParamsField = value;
                    this.RaisePropertyChanged("Return_Params");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_No {
            get {
                return this.Trade_NoField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_NoField, value) != true)) {
                    this.Trade_NoField = value;
                    this.RaisePropertyChanged("Trade_No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_Status {
            get {
                return this.Trade_StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_StatusField, value) != true)) {
                    this.Trade_StatusField = value;
                    this.RaisePropertyChanged("Trade_Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_Time {
            get {
                return this.Trade_TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_TimeField, value) != true)) {
                    this.Trade_TimeField = value;
                    this.RaisePropertyChanged("Trade_Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PayPaidCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class PayPaidCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EncryptTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Merchant_CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferenceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((object.ReferenceEquals(this.AmountField, value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bank {
            get {
                return this.BankField;
            }
            set {
                if ((object.ReferenceEquals(this.BankField, value) != true)) {
                    this.BankField = value;
                    this.RaisePropertyChanged("Bank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIDField, value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EncryptText {
            get {
                return this.EncryptTextField;
            }
            set {
                if ((object.ReferenceEquals(this.EncryptTextField, value) != true)) {
                    this.EncryptTextField = value;
                    this.RaisePropertyChanged("EncryptText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Merchant_Code {
            get {
                return this.Merchant_CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.Merchant_CodeField, value) != true)) {
                    this.Merchant_CodeField = value;
                    this.RaisePropertyChanged("Merchant_Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferenceID {
            get {
                return this.ReferenceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceIDField, value) != true)) {
                    this.ReferenceIDField = value;
                    this.RaisePropertyChanged("ReferenceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponseMsg {
            get {
                return this.ResponseMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseMsgField, value) != true)) {
                    this.ResponseMsgField = value;
                    this.RaisePropertyChanged("ResponseMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponseTime {
            get {
                return this.ResponseTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseTimeField, value) != true)) {
                    this.ResponseTimeField = value;
                    this.RaisePropertyChanged("ResponseTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TenalipayAlipayCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class TenalipayAlipayCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MemberIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Reserved1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Reserved2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Reserved3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReturnCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((object.ReferenceEquals(this.AmountField, value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Datetime {
            get {
                return this.DatetimeField;
            }
            set {
                if ((object.ReferenceEquals(this.DatetimeField, value) != true)) {
                    this.DatetimeField = value;
                    this.RaisePropertyChanged("Datetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MemberIDField, value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderIDField, value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reserved1 {
            get {
                return this.Reserved1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Reserved1Field, value) != true)) {
                    this.Reserved1Field = value;
                    this.RaisePropertyChanged("Reserved1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reserved2 {
            get {
                return this.Reserved2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Reserved2Field, value) != true)) {
                    this.Reserved2Field = value;
                    this.RaisePropertyChanged("Reserved2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reserved3 {
            get {
                return this.Reserved3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Reserved3Field, value) != true)) {
                    this.Reserved3Field = value;
                    this.RaisePropertyChanged("Reserved3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnCode {
            get {
                return this.ReturnCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnCodeField, value) != true)) {
                    this.ReturnCodeField = value;
                    this.RaisePropertyChanged("ReturnCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="YingBaoWeChatCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class YingBaoWeChatCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EyPalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EyPalTime {
            get {
                return this.EyPalTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EyPalTimeField, value) != true)) {
                    this.EyPalTimeField = value;
                    this.RaisePropertyChanged("EyPalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpState {
            get {
                return this.OpStateField;
            }
            set {
                if ((object.ReferenceEquals(this.OpStateField, value) != true)) {
                    this.OpStateField = value;
                    this.RaisePropertyChanged("OpState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderIdField, value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNo {
            get {
                return this.OrderNoField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNoField, value) != true)) {
                    this.OrderNoField = value;
                    this.RaisePropertyChanged("OrderNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Partner {
            get {
                return this.PartnerField;
            }
            set {
                if ((object.ReferenceEquals(this.PartnerField, value) != true)) {
                    this.PartnerField = value;
                    this.RaisePropertyChanged("Partner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayAmount {
            get {
                return this.PayAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.PayAmountField, value) != true)) {
                    this.PayAmountField = value;
                    this.RaisePropertyChanged("PayAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayType {
            get {
                return this.PayTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PayTypeField, value) != true)) {
                    this.PayTypeField = value;
                    this.RaisePropertyChanged("PayType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThousandPayCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ThousandPayCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EkaOrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EkaTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Attach {
            get {
                return this.AttachField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachField, value) != true)) {
                    this.AttachField = value;
                    this.RaisePropertyChanged("Attach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EkaOrderId {
            get {
                return this.EkaOrderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EkaOrderIdField, value) != true)) {
                    this.EkaOrderIdField = value;
                    this.RaisePropertyChanged("EkaOrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EkaTime {
            get {
                return this.EkaTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EkaTimeField, value) != true)) {
                    this.EkaTimeField = value;
                    this.RaisePropertyChanged("EkaTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Msg {
            get {
                return this.MsgField;
            }
            set {
                if ((object.ReferenceEquals(this.MsgField, value) != true)) {
                    this.MsgField = value;
                    this.RaisePropertyChanged("Msg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OValue {
            get {
                return this.OValueField;
            }
            set {
                if ((object.ReferenceEquals(this.OValueField, value) != true)) {
                    this.OValueField = value;
                    this.RaisePropertyChanged("OValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpState {
            get {
                return this.OpStateField;
            }
            set {
                if ((object.ReferenceEquals(this.OpStateField, value) != true)) {
                    this.OpStateField = value;
                    this.RaisePropertyChanged("OpState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderIdField, value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShanDongAliPayCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ShanDongAliPayCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_noField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Trade_statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string bodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string buyer_emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string buyer_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string discountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string gmt_createField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string gmt_paymentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string is_total_fee_adjustField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string notify_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string notify_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string notify_typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string out_trade_noField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string payment_typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string quantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string seller_emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string seller_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sign_typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string subjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string total_feeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string use_couponField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_no {
            get {
                return this.Trade_noField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_noField, value) != true)) {
                    this.Trade_noField = value;
                    this.RaisePropertyChanged("Trade_no");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trade_status {
            get {
                return this.Trade_statusField;
            }
            set {
                if ((object.ReferenceEquals(this.Trade_statusField, value) != true)) {
                    this.Trade_statusField = value;
                    this.RaisePropertyChanged("Trade_status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string body {
            get {
                return this.bodyField;
            }
            set {
                if ((object.ReferenceEquals(this.bodyField, value) != true)) {
                    this.bodyField = value;
                    this.RaisePropertyChanged("body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string buyer_email {
            get {
                return this.buyer_emailField;
            }
            set {
                if ((object.ReferenceEquals(this.buyer_emailField, value) != true)) {
                    this.buyer_emailField = value;
                    this.RaisePropertyChanged("buyer_email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string buyer_id {
            get {
                return this.buyer_idField;
            }
            set {
                if ((object.ReferenceEquals(this.buyer_idField, value) != true)) {
                    this.buyer_idField = value;
                    this.RaisePropertyChanged("buyer_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string discount {
            get {
                return this.discountField;
            }
            set {
                if ((object.ReferenceEquals(this.discountField, value) != true)) {
                    this.discountField = value;
                    this.RaisePropertyChanged("discount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string gmt_create {
            get {
                return this.gmt_createField;
            }
            set {
                if ((object.ReferenceEquals(this.gmt_createField, value) != true)) {
                    this.gmt_createField = value;
                    this.RaisePropertyChanged("gmt_create");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string gmt_payment {
            get {
                return this.gmt_paymentField;
            }
            set {
                if ((object.ReferenceEquals(this.gmt_paymentField, value) != true)) {
                    this.gmt_paymentField = value;
                    this.RaisePropertyChanged("gmt_payment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string is_total_fee_adjust {
            get {
                return this.is_total_fee_adjustField;
            }
            set {
                if ((object.ReferenceEquals(this.is_total_fee_adjustField, value) != true)) {
                    this.is_total_fee_adjustField = value;
                    this.RaisePropertyChanged("is_total_fee_adjust");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string notify_id {
            get {
                return this.notify_idField;
            }
            set {
                if ((object.ReferenceEquals(this.notify_idField, value) != true)) {
                    this.notify_idField = value;
                    this.RaisePropertyChanged("notify_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string notify_time {
            get {
                return this.notify_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.notify_timeField, value) != true)) {
                    this.notify_timeField = value;
                    this.RaisePropertyChanged("notify_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string notify_type {
            get {
                return this.notify_typeField;
            }
            set {
                if ((object.ReferenceEquals(this.notify_typeField, value) != true)) {
                    this.notify_typeField = value;
                    this.RaisePropertyChanged("notify_type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string out_trade_no {
            get {
                return this.out_trade_noField;
            }
            set {
                if ((object.ReferenceEquals(this.out_trade_noField, value) != true)) {
                    this.out_trade_noField = value;
                    this.RaisePropertyChanged("out_trade_no");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string payment_type {
            get {
                return this.payment_typeField;
            }
            set {
                if ((object.ReferenceEquals(this.payment_typeField, value) != true)) {
                    this.payment_typeField = value;
                    this.RaisePropertyChanged("payment_type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string price {
            get {
                return this.priceField;
            }
            set {
                if ((object.ReferenceEquals(this.priceField, value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((object.ReferenceEquals(this.quantityField, value) != true)) {
                    this.quantityField = value;
                    this.RaisePropertyChanged("quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string seller_email {
            get {
                return this.seller_emailField;
            }
            set {
                if ((object.ReferenceEquals(this.seller_emailField, value) != true)) {
                    this.seller_emailField = value;
                    this.RaisePropertyChanged("seller_email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string seller_id {
            get {
                return this.seller_idField;
            }
            set {
                if ((object.ReferenceEquals(this.seller_idField, value) != true)) {
                    this.seller_idField = value;
                    this.RaisePropertyChanged("seller_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sign {
            get {
                return this.signField;
            }
            set {
                if ((object.ReferenceEquals(this.signField, value) != true)) {
                    this.signField = value;
                    this.RaisePropertyChanged("sign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sign_type {
            get {
                return this.sign_typeField;
            }
            set {
                if ((object.ReferenceEquals(this.sign_typeField, value) != true)) {
                    this.sign_typeField = value;
                    this.RaisePropertyChanged("sign_type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string subject {
            get {
                return this.subjectField;
            }
            set {
                if ((object.ReferenceEquals(this.subjectField, value) != true)) {
                    this.subjectField = value;
                    this.RaisePropertyChanged("subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string total_fee {
            get {
                return this.total_feeField;
            }
            set {
                if ((object.ReferenceEquals(this.total_feeField, value) != true)) {
                    this.total_feeField = value;
                    this.RaisePropertyChanged("total_fee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string use_coupon {
            get {
                return this.use_couponField;
            }
            set {
                if ((object.ReferenceEquals(this.use_couponField, value) != true)) {
                    this.use_couponField = value;
                    this.RaisePropertyChanged("use_coupon");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RfuPayWeChatCallbackResponse", Namespace="http://schemas.datacontract.org/2004/07/Services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class RfuPayWeChatCallbackResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BankBillNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EncodeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GoodsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignMD5Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuccField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TradeNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppType {
            get {
                return this.AppTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AppTypeField, value) != true)) {
                    this.AppTypeField = value;
                    this.RaisePropertyChanged("AppType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BankBillNo {
            get {
                return this.BankBillNoField;
            }
            set {
                if ((object.ReferenceEquals(this.BankBillNoField, value) != true)) {
                    this.BankBillNoField = value;
                    this.RaisePropertyChanged("BankBillNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EncodeType {
            get {
                return this.EncodeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EncodeTypeField, value) != true)) {
                    this.EncodeTypeField = value;
                    this.RaisePropertyChanged("EncodeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Goods {
            get {
                return this.GoodsField;
            }
            set {
                if ((object.ReferenceEquals(this.GoodsField, value) != true)) {
                    this.GoodsField = value;
                    this.RaisePropertyChanged("Goods");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderAmount {
            get {
                return this.OrderAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderAmountField, value) != true)) {
                    this.OrderAmountField = value;
                    this.RaisePropertyChanged("OrderAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNo {
            get {
                return this.OrderNoField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNoField, value) != true)) {
                    this.OrderNoField = value;
                    this.RaisePropertyChanged("OrderNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartyId {
            get {
                return this.PartyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PartyIdField, value) != true)) {
                    this.PartyIdField = value;
                    this.RaisePropertyChanged("PartyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignMD5 {
            get {
                return this.SignMD5Field;
            }
            set {
                if ((object.ReferenceEquals(this.SignMD5Field, value) != true)) {
                    this.SignMD5Field = value;
                    this.RaisePropertyChanged("SignMD5");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Succ {
            get {
                return this.SuccField;
            }
            set {
                if ((object.ReferenceEquals(this.SuccField, value) != true)) {
                    this.SuccField = value;
                    this.RaisePropertyChanged("Succ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TradeNo {
            get {
                return this.TradeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TradeNoField, value) != true)) {
                    this.TradeNoField = value;
                    this.RaisePropertyChanged("TradeNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="svcPayDeposit.IDeposit")]
    public interface IDeposit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createFastDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createFastDepositTransactionResponse")]
        System.Xml.Linq.XElement createFastDepositTransaction(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createFastDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createFastDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createFastDepositTransactionAsync(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createFastDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createFastDepositTransactionV1Response")]
        System.Xml.Linq.XElement createFastDepositTransactionV1(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createFastDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createFastDepositTransactionV1Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createFastDepositTransactionV1Async(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createFastDepositTransactionV2", ReplyAction="http://tempuri.org/IDeposit/createFastDepositTransactionV2Response")]
        System.Xml.Linq.XElement createFastDepositTransactionV2(
                    long operatorId, 
                    long memberId, 
                    string memberCode, 
                    string channel, 
                    long payMethodId, 
                    string requestCurrency, 
                    decimal requestAmount, 
                    long bankAccountId, 
                    string bankAccountName, 
                    string bankAccountNumber, 
                    System.DateTime bankTransferDate, 
                    string bankReference, 
                    string bankCode, 
                    string bankName, 
                    string bankNameNative, 
                    W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createFastDepositTransactionV2", ReplyAction="http://tempuri.org/IDeposit/createFastDepositTransactionV2Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createFastDepositTransactionV2Async(
                    long operatorId, 
                    long memberId, 
                    string memberCode, 
                    string channel, 
                    long payMethodId, 
                    string requestCurrency, 
                    decimal requestAmount, 
                    long bankAccountId, 
                    string bankAccountName, 
                    string bankAccountNumber, 
                    System.DateTime bankTransferDate, 
                    string bankReference, 
                    string bankCode, 
                    string bankName, 
                    string bankNameNative, 
                    W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionResponse")]
        System.Xml.Linq.XElement createOnlineDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionV1Response")]
        System.Xml.Linq.XElement createOnlineDepositTransactionV1(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionV1Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionV1Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransactionV2", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionV2Response")]
        System.Xml.Linq.XElement createOnlineDepositTransactionV2(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, string bankCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransactionV2", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionV2Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionV2Async(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, string bankCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransaction", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionResponse")]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionResponse createSDAPayTransaction(W88.WebRef.svcPayDeposit.createSDAPayTransactionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransaction", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionResponse")]
        System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionResponse> createSDAPayTransactionAsync(W88.WebRef.svcPayDeposit.createSDAPayTransactionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalf", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalfResponse")]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfResponse createSDAPayTransactionOnBehalf(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalf", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalfResponse")]
        System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfResponse> createSDAPayTransactionOnBehalfAsync(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalfV1", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalfV1Response")]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Response createSDAPayTransactionOnBehalfV1(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalfV1", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionOnBehalfV1Response")]
        System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Response> createSDAPayTransactionOnBehalfV1Async(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionV1Response")]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Response createSDAPayTransactionV1(W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createSDAPayTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createSDAPayTransactionV1Response")]
        System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Response> createSDAPayTransactionV1Async(W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSDAPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSDAPayTransactionResponse")]
        bool validateSDAPayTransaction(string ip, string postedParameter, string merchantId, string payMethodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSDAPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSDAPayTransactionResponse")]
        System.Threading.Tasks.Task<bool> validateSDAPayTransactionAsync(string ip, string postedParameter, string merchantId, string payMethodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getSDAPayDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/getSDAPayDepositTransactionResponse")]
        System.Data.DataTable getSDAPayDepositTransaction(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getSDAPayDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/getSDAPayDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getSDAPayDepositTransactionAsync(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNextPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateNextPayTransactionResponse")]
        bool validateNextPayTransaction(string ip, string np_inv, string np_amt, string np_refCode, string np_merID, string nextPayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNextPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateNextPayTransactionResponse")]
        System.Threading.Tasks.Task<bool> validateNextPayTransactionAsync(string ip, string np_inv, string np_amt, string np_refCode, string np_merID, string nextPayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNextPayTransactionV1", ReplyAction="http://tempuri.org/IDeposit/validateNextPayTransactionV1Response")]
        bool validateNextPayTransactionV1(string ip, string np_inv, string np_amt, string np_refCode, string nextPayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNextPayTransactionV1", ReplyAction="http://tempuri.org/IDeposit/validateNextPayTransactionV1Response")]
        System.Threading.Tasks.Task<bool> validateNextPayTransactionV1Async(string ip, string np_inv, string np_amt, string np_refCode, string nextPayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/getDepositTransactionResponse")]
        System.Data.DataTable getDepositTransaction(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/getDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getDepositTransactionAsync(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/updateDepositAmount", ReplyAction="http://tempuri.org/IDeposit/updateDepositAmountResponse")]
        bool updateDepositAmount(long invId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/updateDepositAmount", ReplyAction="http://tempuri.org/IDeposit/updateDepositAmountResponse")]
        System.Threading.Tasks.Task<bool> updateDepositAmountAsync(long invId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/SMSDeposit", ReplyAction="http://tempuri.org/IDeposit/SMSDepositResponse")]
        W88.WebRef.svcPayDeposit.SMSDepositResponse SMSDeposit(W88.WebRef.svcPayDeposit.SMSDepositRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/SMSDeposit", ReplyAction="http://tempuri.org/IDeposit/SMSDepositResponse")]
        System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.SMSDepositResponse> SMSDepositAsync(W88.WebRef.svcPayDeposit.SMSDepositRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBill99Transaction", ReplyAction="http://tempuri.org/IDeposit/validateBill99TransactionResponse")]
        bool validateBill99Transaction(
                    string ip, 
                    string domain, 
                    string merchantAcctId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string bankId, 
                    string orderId, 
                    string orderTime, 
                    string orderAmount, 
                    string dealId, 
                    string bankDealId, 
                    string dealTime, 
                    string payAmount, 
                    string fee, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errCode, 
                    string signMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBill99Transaction", ReplyAction="http://tempuri.org/IDeposit/validateBill99TransactionResponse")]
        System.Threading.Tasks.Task<bool> validateBill99TransactionAsync(
                    string ip, 
                    string domain, 
                    string merchantAcctId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string bankId, 
                    string orderId, 
                    string orderTime, 
                    string orderAmount, 
                    string dealId, 
                    string bankDealId, 
                    string dealTime, 
                    string payAmount, 
                    string fee, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errCode, 
                    string signMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateIPSTransaction", ReplyAction="http://tempuri.org/IDeposit/validateIPSTransactionResponse")]
        bool validateIPSTransaction(string ip, string domain, string billNo, string merchantCode, string ipsAmount, string currencyType, string date, string succ, string msg, string attach, string ipsBillNo, string retEncodeType, string signature, string bankBillNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateIPSTransaction", ReplyAction="http://tempuri.org/IDeposit/validateIPSTransactionResponse")]
        System.Threading.Tasks.Task<bool> validateIPSTransactionAsync(string ip, string domain, string billNo, string merchantCode, string ipsAmount, string currencyType, string date, string succ, string msg, string attach, string ipsBillNo, string retEncodeType, string signature, string bankBillNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionResponse")]
        System.Xml.Linq.XElement createWingDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionV1Response")]
        System.Xml.Linq.XElement createWingDepositTransactionV1(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionV1Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionV1Async(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransactionV2", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionV2Response")]
        System.Xml.Linq.XElement createWingDepositTransactionV2(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransactionV2", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionV2Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionV2Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransactionV3", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionV3Response")]
        System.Xml.Linq.XElement createWingDepositTransactionV3(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createWingDepositTransactionV3", ReplyAction="http://tempuri.org/IDeposit/createWingDepositTransactionV3Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionV3Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createMoneyTransferDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createMoneyTransferDepositTransactionResponse")]
        System.Xml.Linq.XElement createMoneyTransferDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createMoneyTransferDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createMoneyTransferDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createMoneyTransferDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createPayPalDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createPayPalDepositTransactionResponse")]
        System.Xml.Linq.XElement createPayPalDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createPayPalDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createPayPalDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createPayPalDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createPayPalDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createPayPalDepositTransactionV1Response")]
        System.Xml.Linq.XElement createPayPalDepositTransactionV1(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createPayPalDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createPayPalDepositTransactionV1Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createPayPalDepositTransactionV1Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateShengPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateShengPayTransactionResponse")]
        short validateShengPayTransaction(
                    string ip, 
                    string domain, 
                    string Name, 
                    string Version, 
                    string Charset, 
                    string TraceNo, 
                    string MsgSender, 
                    string SendTime, 
                    string InstCode, 
                    string OrderNo, 
                    string OrderAmount, 
                    string TransNo, 
                    string TransAmount, 
                    string TransStatus, 
                    string TransType, 
                    string TransTime, 
                    string MerchantNo, 
                    string ErrorCode, 
                    string ErrorMsg, 
                    string Ext1, 
                    string SignType, 
                    string SignMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateShengPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateShengPayTransactionResponse")]
        System.Threading.Tasks.Task<short> validateShengPayTransactionAsync(
                    string ip, 
                    string domain, 
                    string Name, 
                    string Version, 
                    string Charset, 
                    string TraceNo, 
                    string MsgSender, 
                    string SendTime, 
                    string InstCode, 
                    string OrderNo, 
                    string OrderAmount, 
                    string TransNo, 
                    string TransAmount, 
                    string TransStatus, 
                    string TransType, 
                    string TransTime, 
                    string MerchantNo, 
                    string ErrorCode, 
                    string ErrorMsg, 
                    string Ext1, 
                    string SignType, 
                    string SignMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNganLuongTransaction", ReplyAction="http://tempuri.org/IDeposit/validateNganLuongTransactionResponse")]
        bool validateNganLuongTransaction(string ip, string domain, string merchant_site_code, string receiver, string order_code, string amount, string currency_code, string token_code, string checksum, string transactionId, string strNLAmount, string transactionStatus, string payerName, string payerEmail, string payerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNganLuongTransaction", ReplyAction="http://tempuri.org/IDeposit/validateNganLuongTransactionResponse")]
        System.Threading.Tasks.Task<bool> validateNganLuongTransactionAsync(string ip, string domain, string merchant_site_code, string receiver, string order_code, string amount, string currency_code, string token_code, string checksum, string transactionId, string strNLAmount, string transactionStatus, string payerName, string payerEmail, string payerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getDepositOnlineTransaction", ReplyAction="http://tempuri.org/IDeposit/getDepositOnlineTransactionResponse")]
        System.Data.DataTable getDepositOnlineTransaction(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getDepositOnlineTransaction", ReplyAction="http://tempuri.org/IDeposit/getDepositOnlineTransactionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getDepositOnlineTransactionAsync(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getPac2PayBankInfo", ReplyAction="http://tempuri.org/IDeposit/getPac2PayBankInfoResponse")]
        System.Xml.Linq.XElement getPac2PayBankInfo(string bank, string country, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getPac2PayBankInfo", ReplyAction="http://tempuri.org/IDeposit/getPac2PayBankInfoResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> getPac2PayBankInfoAsync(string bank, string country, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createPac2PayTransaction", ReplyAction="http://tempuri.org/IDeposit/createPac2PayTransactionResponse")]
        System.Xml.Linq.XElement createPac2PayTransaction(long invId, decimal requestAmount, long memberId, string memberName, string bank, string accountNo, string country, int compareMode, int remitMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createPac2PayTransaction", ReplyAction="http://tempuri.org/IDeposit/createPac2PayTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createPac2PayTransactionAsync(long invId, decimal requestAmount, long memberId, string memberName, string bank, string accountNo, string country, int compareMode, int remitMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getPac2PayTransferScheme", ReplyAction="http://tempuri.org/IDeposit/getPac2PayTransferSchemeResponse")]
        string getPac2PayTransferScheme(string bank, int remitMode, string country, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getPac2PayTransferScheme", ReplyAction="http://tempuri.org/IDeposit/getPac2PayTransferSchemeResponse")]
        System.Threading.Tasks.Task<string> getPac2PayTransferSchemeAsync(string bank, int remitMode, string country, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getPac2PayDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/getPac2PayDepositTransactionResponse")]
        System.Data.DataTable getPac2PayDepositTransaction(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/getPac2PayDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/getPac2PayDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getPac2PayDepositTransactionAsync(long invId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePac2PayTransaction", ReplyAction="http://tempuri.org/IDeposit/validatePac2PayTransactionResponse")]
        short validatePac2PayTransaction(string ip, string postData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePac2PayTransaction", ReplyAction="http://tempuri.org/IDeposit/validatePac2PayTransactionResponse")]
        System.Threading.Tasks.Task<short> validatePac2PayTransactionAsync(string ip, string postData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createNetellerTransaction", ReplyAction="http://tempuri.org/IDeposit/createNetellerTransactionResponse")]
        bool createNetellerTransaction(long invId, long operatorId, decimal requestAmount, string requestCurrency, long memberId, string memberCode, long accountId, int secureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createNetellerTransaction", ReplyAction="http://tempuri.org/IDeposit/createNetellerTransactionResponse")]
        System.Threading.Tasks.Task<bool> createNetellerTransactionAsync(long invId, long operatorId, decimal requestAmount, string requestCurrency, long memberId, string memberCode, long accountId, int secureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateAlogateway", ReplyAction="http://tempuri.org/IDeposit/validateAlogatewayResponse")]
        short validateAlogateway(string ip, string transactionId, string merchantOrder, string amount, string currency, string bankCode, string bankTransactionId, string status, string message, string billingDescriptor, string firstName, string lastName, string control);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateAlogateway", ReplyAction="http://tempuri.org/IDeposit/validateAlogatewayResponse")]
        System.Threading.Tasks.Task<short> validateAlogatewayAsync(string ip, string transactionId, string merchantOrder, string amount, string currency, string bankCode, string bankTransactionId, string status, string message, string billingDescriptor, string firstName, string lastName, string control);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/updateAffiliateDepositAmount", ReplyAction="http://tempuri.org/IDeposit/updateAffiliateDepositAmountResponse")]
        bool updateAffiliateDepositAmount(long invId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/updateAffiliateDepositAmount", ReplyAction="http://tempuri.org/IDeposit/updateAffiliateDepositAmountResponse")]
        System.Threading.Tasks.Task<bool> updateAffiliateDepositAmountAsync(long invId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateECPSSTransaction", ReplyAction="http://tempuri.org/IDeposit/validateECPSSTransactionResponse")]
        short validateECPSSTransaction(string ip, string domain, string billNo, string amount, string succeed, string result, string signMD5info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateECPSSTransaction", ReplyAction="http://tempuri.org/IDeposit/validateECPSSTransactionResponse")]
        System.Threading.Tasks.Task<short> validateECPSSTransactionAsync(string ip, string domain, string billNo, string amount, string succeed, string result, string signMD5info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateHnapayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateHnapayTransactionResponse")]
        short validateHnapayTransaction(string ip, string domain, string orderID, string resultCode, string stateCode, string orderAmount, string payAmount, string acquiringTime, string completeTime, string orderNo, string partnerID, string remark, string charset, string signType, string signMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateHnapayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateHnapayTransactionResponse")]
        System.Threading.Tasks.Task<short> validateHnapayTransactionAsync(string ip, string domain, string orderID, string resultCode, string stateCode, string orderAmount, string payAmount, string acquiringTime, string completeTime, string orderNo, string partnerID, string remark, string charset, string signType, string signMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePay19Transaction", ReplyAction="http://tempuri.org/IDeposit/validatePay19TransactionResponse")]
        short validatePay19Transaction(
                    string ip, 
                    string domain, 
                    string versionId, 
                    string merchantId, 
                    string verifyString, 
                    string orderDate, 
                    string orderId, 
                    string result, 
                    string amount, 
                    string currency, 
                    string paySq, 
                    string payDate, 
                    string pmId, 
                    string pcId, 
                    string payCardNo, 
                    string payCardPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePay19Transaction", ReplyAction="http://tempuri.org/IDeposit/validatePay19TransactionResponse")]
        System.Threading.Tasks.Task<short> validatePay19TransactionAsync(
                    string ip, 
                    string domain, 
                    string versionId, 
                    string merchantId, 
                    string verifyString, 
                    string orderDate, 
                    string orderId, 
                    string result, 
                    string amount, 
                    string currency, 
                    string paySq, 
                    string payDate, 
                    string pmId, 
                    string pcId, 
                    string payCardNo, 
                    string payCardPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateAllInPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateAllInPayTransactionResponse")]
        short validateAllInPayTransaction(
                    string ip, 
                    string domain, 
                    string merchantId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string issuerId, 
                    string paymentOrderId, 
                    string orderNo, 
                    string orderDatetime, 
                    string orderAmount, 
                    string payDatetime, 
                    string payAmount, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errorCode, 
                    string returnDatetime, 
                    string signMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateAllInPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateAllInPayTransactionResponse")]
        System.Threading.Tasks.Task<short> validateAllInPayTransactionAsync(
                    string ip, 
                    string domain, 
                    string merchantId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string issuerId, 
                    string paymentOrderId, 
                    string orderNo, 
                    string orderDatetime, 
                    string orderAmount, 
                    string payDatetime, 
                    string payAmount, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errorCode, 
                    string returnDatetime, 
                    string signMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createNextPayDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createNextPayDepositTransactionResponse")]
        System.Xml.Linq.XElement createNextPayDepositTransaction(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string nextPayInvId, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createNextPayDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createNextPayDepositTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createNextPayDepositTransactionAsync(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string nextPayInvId, W88.WebRef.svcPayDeposit.DepositSource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSdPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSdPayTransactionResponse")]
        string validateSdPayTransaction(string ip, string res, string merchantAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSdPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSdPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateSdPayTransactionAsync(string ip, string res, string merchantAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateVeritransTransaction", ReplyAction="http://tempuri.org/IDeposit/validateVeritransTransactionResponse")]
        string validateVeritransTransaction(string ip, string res);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateVeritransTransaction", ReplyAction="http://tempuri.org/IDeposit/validateVeritransTransactionResponse")]
        System.Threading.Tasks.Task<string> validateVeritransTransactionAsync(string ip, string res);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayTransactionResponse")]
        string validateYeePayTransaction(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateYeePayTransactionAsync(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayDirectTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayDirectTransactionResponse")]
        string validateYeePayDirectTransaction(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string rb_BankId, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string rq_CardNo, 
                    string ru_Trxtime, 
                    string rq_SourceFee, 
                    string rq_TargetFee, 
                    string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayDirectTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayDirectTransactionResponse")]
        System.Threading.Tasks.Task<string> validateYeePayDirectTransactionAsync(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string rb_BankId, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string rq_CardNo, 
                    string ru_Trxtime, 
                    string rq_SourceFee, 
                    string rq_TargetFee, 
                    string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayWeChatTransactionResponse")]
        string validateYeePayWeChatTransaction(string ip, string requestId, string code, string amount, string status, string paydate, string errorcode, string errormsg, string sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayWeChatTransactionResponse")]
        System.Threading.Tasks.Task<string> validateYeePayWeChatTransactionAsync(string ip, string requestId, string code, string amount, string status, string paydate, string errorcode, string errormsg, string sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateHelp2PayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateHelp2PayTransactionResponse")]
        string validateHelp2PayTransaction(string ip, string merchant, string reference, string currency, string amount, string language, string customer, string datetime, string note, string key, string status, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateHelp2PayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateHelp2PayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateHelp2PayTransactionAsync(string ip, string merchant, string reference, string currency, string amount, string language, string customer, string datetime, string note, string key, string status, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSafePayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSafePayTransactionResponse")]
        string validateSafePayTransaction(string ip, string domain, string userID, string orderID, string amount, string currency, string status, string hmac2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSafePayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSafePayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateSafePayTransactionAsync(string ip, string domain, string userID, string orderID, string amount, string currency, string status, string hmac2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateDanalPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateDanalPayTransactionResponse")]
        string validateDanalPayTransaction(string ip, string cpId, string dpTrxId, string orderID, string userId, string amount, string createTime, string result, string signMD5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateDanalPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateDanalPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateDanalPayTransactionAsync(string ip, string cpId, string dpTrxId, string orderID, string userId, string amount, string createTime, string result, string signMD5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBofoPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBofoPayTransactionResponse")]
        string validateBofoPayTransaction(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBofoPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBofoPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateBofoPayTransactionAsync(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateIBanqTransaction", ReplyAction="http://tempuri.org/IDeposit/validateIBanqTransactionResponse")]
        string validateIBanqTransaction(string ip, string transactionId, string processorTransId, string amount, string currency, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateIBanqTransaction", ReplyAction="http://tempuri.org/IDeposit/validateIBanqTransactionResponse")]
        System.Threading.Tasks.Task<string> validateIBanqTransactionAsync(string ip, string transactionId, string processorTransId, string amount, string currency, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createCreditCardTransaction", ReplyAction="http://tempuri.org/IDeposit/createCreditCardTransactionResponse")]
        System.Xml.Linq.XElement createCreditCardTransaction(long operatorId, long memberId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string cardName, string cardNo, string cardType, string cardExpiryMonth, string cardExpiryYear, string cardSecurityCode, string issuingBank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createCreditCardTransaction", ReplyAction="http://tempuri.org/IDeposit/createCreditCardTransactionResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createCreditCardTransactionAsync(long operatorId, long memberId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string cardName, string cardNo, string cardType, string cardExpiryMonth, string cardExpiryYear, string cardSecurityCode, string issuingBank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateAllDebitTransaction", ReplyAction="http://tempuri.org/IDeposit/validateAllDebitTransactionResponse")]
        string validateAllDebitTransaction(string ip, string merNo, string gatewayNo, string tradeNo, string orderNo, string orderCurrency, string orderAmount, string orderStatus, string orderInfo, string signInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateAllDebitTransaction", ReplyAction="http://tempuri.org/IDeposit/validateAllDebitTransactionResponse")]
        System.Threading.Tasks.Task<string> validateAllDebitTransactionAsync(string ip, string merNo, string gatewayNo, string tradeNo, string orderNo, string orderCurrency, string orderAmount, string orderStatus, string orderInfo, string signInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateQijiPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateQijiPayTransactionResponse")]
        string validateQijiPayTransaction(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateQijiPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateQijiPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateQijiPayTransactionAsync(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateChinaPnRTransaction", ReplyAction="http://tempuri.org/IDeposit/validateChinaPnRTransactionResponse")]
        string validateChinaPnRTransaction(string ip, string cmdId, string merId, string respCode, string trxId, string ordAmt, string curCode, string pId, string ordId, string merPriv, string retType, string divDetails, string gateId, string chkValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateChinaPnRTransaction", ReplyAction="http://tempuri.org/IDeposit/validateChinaPnRTransactionResponse")]
        System.Threading.Tasks.Task<string> validateChinaPnRTransactionAsync(string ip, string cmdId, string merId, string respCode, string trxId, string ordAmt, string curCode, string pId, string ordId, string merPriv, string retType, string divDetails, string gateId, string chkValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayCardTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayCardTransactionResponse")]
        string validateYeePayCardTransaction(
                    string ip, 
                    string domain, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string p1_MerId, 
                    string p2_Order, 
                    string p3_Amt, 
                    string p4_FrpId, 
                    string p5_CardNo, 
                    string p6_confirmAmount, 
                    string p7_realAmount, 
                    string p8_cardStatus, 
                    string p9_MP, 
                    string pb_BalanceAmt, 
                    string pc_BalanceAct, 
                    string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYeePayCardTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYeePayCardTransactionResponse")]
        System.Threading.Tasks.Task<string> validateYeePayCardTransactionAsync(
                    string ip, 
                    string domain, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string p1_MerId, 
                    string p2_Order, 
                    string p3_Amt, 
                    string p4_FrpId, 
                    string p5_CardNo, 
                    string p6_confirmAmount, 
                    string p7_realAmount, 
                    string p8_cardStatus, 
                    string p9_MP, 
                    string pb_BalanceAmt, 
                    string pc_BalanceAct, 
                    string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateDaddyPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateDaddyPayTransactionResponse")]
        string validateDaddyPayTransaction(
                    string ip, 
                    string type, 
                    string payTime, 
                    string bankId, 
                    string amount, 
                    string companyOrderNum, 
                    string mownecumOrderNum, 
                    string payCardNum, 
                    string payCardName, 
                    string channel, 
                    string area, 
                    string fee, 
                    string transactionCharge, 
                    string key, 
                    string depositMode, 
                    string baseInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateDaddyPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateDaddyPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateDaddyPayTransactionAsync(
                    string ip, 
                    string type, 
                    string payTime, 
                    string bankId, 
                    string amount, 
                    string companyOrderNum, 
                    string mownecumOrderNum, 
                    string payCardNum, 
                    string payCardName, 
                    string channel, 
                    string area, 
                    string fee, 
                    string transactionCharge, 
                    string key, 
                    string depositMode, 
                    string baseInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransactionV3", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionV3Response")]
        System.Xml.Linq.XElement createOnlineDepositTransactionV3(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode, string vendorMemberAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createOnlineDepositTransactionV3", ReplyAction="http://tempuri.org/IDeposit/createOnlineDepositTransactionV3Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionV3Async(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode, string vendorMemberAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createDaddyPayException", ReplyAction="http://tempuri.org/IDeposit/createDaddyPayExceptionResponse")]
        int createDaddyPayException(
                    string amount, 
                    string area, 
                    string baseInfo, 
                    string cardName, 
                    string cardNumber, 
                    string channel, 
                    string charge, 
                    string companyId, 
                    string exactTime, 
                    string fee, 
                    string key, 
                    string note, 
                    string orderNo, 
                    string paymentBank, 
                    string receivingBank, 
                    string receivingName, 
                    string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createDaddyPayException", ReplyAction="http://tempuri.org/IDeposit/createDaddyPayExceptionResponse")]
        System.Threading.Tasks.Task<int> createDaddyPayExceptionAsync(
                    string amount, 
                    string area, 
                    string baseInfo, 
                    string cardName, 
                    string cardNumber, 
                    string channel, 
                    string charge, 
                    string companyId, 
                    string exactTime, 
                    string fee, 
                    string key, 
                    string note, 
                    string orderNo, 
                    string paymentBank, 
                    string receivingBank, 
                    string receivingName, 
                    string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNextPayTransactionV2", ReplyAction="http://tempuri.org/IDeposit/validateNextPayTransactionV2Response")]
        string validateNextPayTransactionV2(string ip, string nextPayId, string inv, string amt, string merID, string refCode, string mark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateNextPayTransactionV2", ReplyAction="http://tempuri.org/IDeposit/validateNextPayTransactionV2Response")]
        System.Threading.Tasks.Task<string> validateNextPayTransactionV2Async(string ip, string nextPayId, string inv, string amt, string merID, string refCode, string mark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSdPayARTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSdPayARTransactionResponse")]
        string validateSdPayARTransaction(string ip, string res, string merchantAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateSdPayARTransaction", ReplyAction="http://tempuri.org/IDeposit/validateSdPayARTransactionResponse")]
        System.Threading.Tasks.Task<string> validateSdPayARTransactionAsync(string ip, string res, string merchantAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createMoneyTransferDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createMoneyTransferDepositTransactionV1Response")]
        System.Xml.Linq.XElement createMoneyTransferDepositTransactionV1(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource depositSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createMoneyTransferDepositTransactionV1", ReplyAction="http://tempuri.org/IDeposit/createMoneyTransferDepositTransactionV1Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> createMoneyTransferDepositTransactionV1Async(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource depositSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateKJTTransaction", ReplyAction="http://tempuri.org/IDeposit/validateKJTTransactionResponse")]
        string validateKJTTransaction(
                    string ip, 
                    string domain, 
                    string notify_id, 
                    string notify_type, 
                    string notify_time, 
                    string _input_charset, 
                    string version, 
                    string outer_trade_no, 
                    string inner_trade_no, 
                    string trade_status, 
                    string trade_amount, 
                    string gmt_create, 
                    string gmt_payment, 
                    string gmt_close, 
                    string sign, 
                    string sign_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateKJTTransaction", ReplyAction="http://tempuri.org/IDeposit/validateKJTTransactionResponse")]
        System.Threading.Tasks.Task<string> validateKJTTransactionAsync(
                    string ip, 
                    string domain, 
                    string notify_id, 
                    string notify_type, 
                    string notify_time, 
                    string _input_charset, 
                    string version, 
                    string outer_trade_no, 
                    string inner_trade_no, 
                    string trade_status, 
                    string trade_amount, 
                    string gmt_create, 
                    string gmt_payment, 
                    string gmt_close, 
                    string sign, 
                    string sign_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateQijiPayTopUpTransaction", ReplyAction="http://tempuri.org/IDeposit/validateQijiPayTopUpTransactionResponse")]
        string validateQijiPayTopUpTransaction(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateQijiPayTopUpTransaction", ReplyAction="http://tempuri.org/IDeposit/validateQijiPayTopUpTransactionResponse")]
        System.Threading.Tasks.Task<string> validateQijiPayTopUpTransactionAsync(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYingBaoAliPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYingBaoAliPayTransactionResponse")]
        string validateYingBaoAliPayTransaction(string ip, W88.WebRef.svcPayDeposit.YingBaoAliPayCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYingBaoAliPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYingBaoAliPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateYingBaoAliPayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.YingBaoAliPayCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateEGHLTransaction", ReplyAction="http://tempuri.org/IDeposit/validateEGHLTransactionResponse")]
        string validateEGHLTransaction(string ip, string responseId, string response, string eInv, string amount, string merchantId, string refCode, string mark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateEGHLTransaction", ReplyAction="http://tempuri.org/IDeposit/validateEGHLTransactionResponse")]
        System.Threading.Tasks.Task<string> validateEGHLTransactionAsync(string ip, string responseId, string response, string eInv, string amount, string merchantId, string refCode, string mark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateLefuWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateLefuWeChatTransactionResponse")]
        string validateLefuWeChatTransaction(string ip, string domain, string apiCode, string versionCode, string currency, string amount, string handlerResult, string tradeOrderCode, string outOrderId, string inputCharset, string signType, string partner, string returnParam, string sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateLefuWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateLefuWeChatTransactionResponse")]
        System.Threading.Tasks.Task<string> validateLefuWeChatTransactionAsync(string ip, string domain, string apiCode, string versionCode, string currency, string amount, string handlerResult, string tradeOrderCode, string outOrderId, string inputCharset, string signType, string partner, string returnParam, string sign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateHeePayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateHeePayTransactionResponse")]
        string validateHeePayTransaction(string ip, W88.WebRef.svcPayDeposit.HeePayCallbackResponse heepayResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateHeePayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateHeePayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateHeePayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.HeePayCallbackResponse heepayResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBaoKimTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBaoKimTransactionResponse")]
        string validateBaoKimTransaction(
                    string ip, 
                    string bpnId, 
                    string orderId, 
                    string transactionId, 
                    string createdOn, 
                    string paymentType, 
                    string transactionStatus, 
                    string totalAmount, 
                    string netAmount, 
                    string feeAmount, 
                    string merchantId, 
                    string customerName, 
                    string customerEmail, 
                    string customerPhone, 
                    string customerAddress, 
                    string verifySign, 
                    string resend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBaoKimTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBaoKimTransactionResponse")]
        System.Threading.Tasks.Task<string> validateBaoKimTransactionAsync(
                    string ip, 
                    string bpnId, 
                    string orderId, 
                    string transactionId, 
                    string createdOn, 
                    string paymentType, 
                    string transactionStatus, 
                    string totalAmount, 
                    string netAmount, 
                    string feeAmount, 
                    string merchantId, 
                    string customerName, 
                    string customerEmail, 
                    string customerPhone, 
                    string customerAddress, 
                    string verifySign, 
                    string resend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBaoKimWalletTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBaoKimWalletTransactionResponse")]
        string validateBaoKimWalletTransaction(long invId, string merchantAcctId, string transactionId, string otp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBaoKimWalletTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBaoKimWalletTransactionResponse")]
        System.Threading.Tasks.Task<string> validateBaoKimWalletTransactionAsync(long invId, string merchantAcctId, string transactionId, string otp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateDPWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateDPWeChatTransactionResponse")]
        string validateDPWeChatTransaction(string ip, W88.WebRef.svcPayDeposit.DPWeChatCallbackResponse dpWCResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateDPWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateDPWeChatTransactionResponse")]
        System.Threading.Tasks.Task<string> validateDPWeChatTransactionAsync(string ip, W88.WebRef.svcPayDeposit.DPWeChatCallbackResponse dpWCResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateTongHuiPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateTongHuiPayTransactionResponse")]
        string validateTongHuiPayTransaction(string ip, W88.WebRef.svcPayDeposit.TongHuiPayCallbackResponse callbackResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateTongHuiPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateTongHuiPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateTongHuiPayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.TongHuiPayCallbackResponse callbackResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createMobileDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createMobileDepositTransactionResponse")]
        string createMobileDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string hashToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/createMobileDepositTransaction", ReplyAction="http://tempuri.org/IDeposit/createMobileDepositTransactionResponse")]
        System.Threading.Tasks.Task<string> createMobileDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string hashToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateJTPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateJTPayTransactionResponse")]
        string validateJTPayTransaction(string ip, string p1_usercode, string p2_order, string p3_money, string p4_status, string p5_jtpayorder, string p6_paymethod, string p7_paychannelnum, string p8_charset, string p9_signtype, string p10_sign, string p11_remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateJTPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateJTPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateJTPayTransactionAsync(string ip, string p1_usercode, string p2_order, string p3_money, string p4_status, string p5_jtpayorder, string p6_paymethod, string p7_paychannelnum, string p8_charset, string p9_signtype, string p10_sign, string p11_remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePayPaidTransaction", ReplyAction="http://tempuri.org/IDeposit/validatePayPaidTransactionResponse")]
        string validatePayPaidTransaction(string ip, W88.WebRef.svcPayDeposit.PayPaidCallbackResponse callbackResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePayPaidTransaction", ReplyAction="http://tempuri.org/IDeposit/validatePayPaidTransactionResponse")]
        System.Threading.Tasks.Task<string> validatePayPaidTransactionAsync(string ip, W88.WebRef.svcPayDeposit.PayPaidCallbackResponse callbackResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateTenalipayAlipayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateTenalipayAlipayTransactionResponse")]
        string validateTenalipayAlipayTransaction(string ip, W88.WebRef.svcPayDeposit.TenalipayAlipayCallbackResponse tenalipayAlipayResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateTenalipayAlipayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateTenalipayAlipayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateTenalipayAlipayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.TenalipayAlipayCallbackResponse tenalipayAlipayResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYingBaoWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYingBaoWeChatTransactionResponse")]
        string validateYingBaoWeChatTransaction(string ip, W88.WebRef.svcPayDeposit.YingBaoWeChatCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateYingBaoWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateYingBaoWeChatTransactionResponse")]
        System.Threading.Tasks.Task<string> validateYingBaoWeChatTransactionAsync(string ip, W88.WebRef.svcPayDeposit.YingBaoWeChatCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateThousandPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateThousandPayTransactionResponse")]
        string validateThousandPayTransaction(string ip, W88.WebRef.svcPayDeposit.ThousandPayCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateThousandPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateThousandPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateThousandPayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.ThousandPayCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateJutaPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateJutaPayTransactionResponse")]
        string validateJutaPayTransaction(string ip, string seller, string datetime, string itemid, string itemdescription, string invoiceno, string confirmdata, string itemprice, string tranresult, string itempriceconversion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateJutaPayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateJutaPayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateJutaPayTransactionAsync(string ip, string seller, string datetime, string itemid, string itemdescription, string invoiceno, string confirmdata, string itemprice, string tranresult, string itempriceconversion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBaoKimScratchCardTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBaoKimScratchCardTransactionResponse")]
        W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionResponse validateBaoKimScratchCardTransaction(W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateBaoKimScratchCardTransaction", ReplyAction="http://tempuri.org/IDeposit/validateBaoKimScratchCardTransactionResponse")]
        System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionResponse> validateBaoKimScratchCardTransactionAsync(W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateShanDongAlipayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateShanDongAlipayTransactionResponse")]
        string validateShanDongAlipayTransaction(string ip, W88.WebRef.svcPayDeposit.ShanDongAliPayCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateShanDongAlipayTransaction", ReplyAction="http://tempuri.org/IDeposit/validateShanDongAlipayTransactionResponse")]
        System.Threading.Tasks.Task<string> validateShanDongAlipayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.ShanDongAliPayCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateRfuPayWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateRfuPayWeChatTransactionResponse")]
        string validateRfuPayWeChatTransaction(string ip, W88.WebRef.svcPayDeposit.RfuPayWeChatCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validateRfuPayWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validateRfuPayWeChatTransactionResponse")]
        System.Threading.Tasks.Task<string> validateRfuPayWeChatTransactionAsync(string ip, W88.WebRef.svcPayDeposit.RfuPayWeChatCallbackResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePayTechWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validatePayTechWeChatTransactionResponse")]
        string validatePayTechWeChatTransaction(string ip, string appKey, string sign, string out_trade_no, string trade_no, string total_fee, string success_time, string trade_status, string result_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeposit/validatePayTechWeChatTransaction", ReplyAction="http://tempuri.org/IDeposit/validatePayTechWeChatTransactionResponse")]
        System.Threading.Tasks.Task<string> validatePayTechWeChatTransactionAsync(string ip, string appKey, string sign, string out_trade_no, string trade_no, string total_fee, string success_time, string trade_status, string result_code);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransaction", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long invId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public decimal requestAmount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long memberId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string memberName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string bank;
        
        public createSDAPayTransactionRequest() {
        }
        
        public createSDAPayTransactionRequest(long invId, decimal requestAmount, long memberId, string memberName, string bank) {
            this.invId = invId;
            this.requestAmount = requestAmount;
            this.memberId = memberId;
            this.memberName = memberName;
            this.bank = bank;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransactionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement createSDAPayTransactionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string statusCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string statusText;
        
        public createSDAPayTransactionResponse() {
        }
        
        public createSDAPayTransactionResponse(System.Xml.Linq.XElement createSDAPayTransactionResult, string statusCode, string statusText) {
            this.createSDAPayTransactionResult = createSDAPayTransactionResult;
            this.statusCode = statusCode;
            this.statusText = statusText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransactionOnBehalf", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionOnBehalfRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long invId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public decimal requestAmount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long memberId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string memberName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string bank;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string eName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string eBankAccount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string eBank;
        
        public createSDAPayTransactionOnBehalfRequest() {
        }
        
        public createSDAPayTransactionOnBehalfRequest(long invId, decimal requestAmount, long memberId, string memberName, string bank, string eName, string eBankAccount, string eBank) {
            this.invId = invId;
            this.requestAmount = requestAmount;
            this.memberId = memberId;
            this.memberName = memberName;
            this.bank = bank;
            this.eName = eName;
            this.eBankAccount = eBankAccount;
            this.eBank = eBank;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransactionOnBehalfResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionOnBehalfResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement createSDAPayTransactionOnBehalfResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string statusCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string statusText;
        
        public createSDAPayTransactionOnBehalfResponse() {
        }
        
        public createSDAPayTransactionOnBehalfResponse(System.Xml.Linq.XElement createSDAPayTransactionOnBehalfResult, string statusCode, string statusText) {
            this.createSDAPayTransactionOnBehalfResult = createSDAPayTransactionOnBehalfResult;
            this.statusCode = statusCode;
            this.statusText = statusText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransactionOnBehalfV1", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionOnBehalfV1Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long invId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public decimal requestAmount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long memberId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string memberName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string bank;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string eName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string eBankAccount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string eBank;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string merchantId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public long payMethodId;
        
        public createSDAPayTransactionOnBehalfV1Request() {
        }
        
        public createSDAPayTransactionOnBehalfV1Request(long invId, decimal requestAmount, long memberId, string memberName, string bank, string eName, string eBankAccount, string eBank, string merchantId, long payMethodId) {
            this.invId = invId;
            this.requestAmount = requestAmount;
            this.memberId = memberId;
            this.memberName = memberName;
            this.bank = bank;
            this.eName = eName;
            this.eBankAccount = eBankAccount;
            this.eBank = eBank;
            this.merchantId = merchantId;
            this.payMethodId = payMethodId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransactionOnBehalfV1Response", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionOnBehalfV1Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement createSDAPayTransactionOnBehalfV1Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string statusCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string statusText;
        
        public createSDAPayTransactionOnBehalfV1Response() {
        }
        
        public createSDAPayTransactionOnBehalfV1Response(System.Xml.Linq.XElement createSDAPayTransactionOnBehalfV1Result, string statusCode, string statusText) {
            this.createSDAPayTransactionOnBehalfV1Result = createSDAPayTransactionOnBehalfV1Result;
            this.statusCode = statusCode;
            this.statusText = statusText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransactionV1", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionV1Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long invId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public decimal requestAmount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long memberId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string memberName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string bank;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string merchantId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public long payMethodId;
        
        public createSDAPayTransactionV1Request() {
        }
        
        public createSDAPayTransactionV1Request(long invId, decimal requestAmount, long memberId, string memberName, string bank, string merchantId, long payMethodId) {
            this.invId = invId;
            this.requestAmount = requestAmount;
            this.memberId = memberId;
            this.memberName = memberName;
            this.bank = bank;
            this.merchantId = merchantId;
            this.payMethodId = payMethodId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createSDAPayTransactionV1Response", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class createSDAPayTransactionV1Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement createSDAPayTransactionV1Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string statusCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string statusText;
        
        public createSDAPayTransactionV1Response() {
        }
        
        public createSDAPayTransactionV1Response(System.Xml.Linq.XElement createSDAPayTransactionV1Result, string statusCode, string statusText) {
            this.createSDAPayTransactionV1Result = createSDAPayTransactionV1Result;
            this.statusCode = statusCode;
            this.statusText = statusText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SMSDeposit", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SMSDepositRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long operatorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string memberCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public decimal amount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string bankSmsAbbr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string channel;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public System.DateTime bankTransferDate;
        
        public SMSDepositRequest() {
        }
        
        public SMSDepositRequest(long operatorId, string memberCode, decimal amount, string bankSmsAbbr, string channel, System.DateTime bankTransferDate) {
            this.operatorId = operatorId;
            this.memberCode = memberCode;
            this.amount = amount;
            this.bankSmsAbbr = bankSmsAbbr;
            this.channel = channel;
            this.bankTransferDate = bankTransferDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SMSDepositResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SMSDepositResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool SMSDepositResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string languageCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string errorCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public long transId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string operatorCode;
        
        public SMSDepositResponse() {
        }
        
        public SMSDepositResponse(bool SMSDepositResult, string languageCode, string errorCode, long transId, string operatorCode) {
            this.SMSDepositResult = SMSDepositResult;
            this.languageCode = languageCode;
            this.errorCode = errorCode;
            this.transId = transId;
            this.operatorCode = operatorCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="validateBaoKimScratchCardTransaction", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class validateBaoKimScratchCardTransactionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long invId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string merchantAcctId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string cardId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string serial;
        
        public validateBaoKimScratchCardTransactionRequest() {
        }
        
        public validateBaoKimScratchCardTransactionRequest(long invId, string merchantAcctId, string cardId, string pin, string serial) {
            this.invId = invId;
            this.merchantAcctId = merchantAcctId;
            this.cardId = cardId;
            this.pin = pin;
            this.serial = serial;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="validateBaoKimScratchCardTransactionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class validateBaoKimScratchCardTransactionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string validateBaoKimScratchCardTransactionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string errorMessage;
        
        public validateBaoKimScratchCardTransactionResponse() {
        }
        
        public validateBaoKimScratchCardTransactionResponse(string validateBaoKimScratchCardTransactionResult, string errorMessage) {
            this.validateBaoKimScratchCardTransactionResult = validateBaoKimScratchCardTransactionResult;
            this.errorMessage = errorMessage;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDepositChannel : W88.WebRef.svcPayDeposit.IDeposit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DepositClient : System.ServiceModel.ClientBase<W88.WebRef.svcPayDeposit.IDeposit>, W88.WebRef.svcPayDeposit.IDeposit {
        
        public DepositClient() {
        }
        
        public DepositClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DepositClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DepositClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DepositClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Xml.Linq.XElement createFastDepositTransaction(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative) {
            return base.Channel.createFastDepositTransaction(operatorId, memberCode, channel, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, bankCode, bankName, bankNameNative);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createFastDepositTransactionAsync(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative) {
            return base.Channel.createFastDepositTransactionAsync(operatorId, memberCode, channel, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, bankCode, bankName, bankNameNative);
        }
        
        public System.Xml.Linq.XElement createFastDepositTransactionV1(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative, string source) {
            return base.Channel.createFastDepositTransactionV1(operatorId, memberCode, channel, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, bankCode, bankName, bankNameNative, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createFastDepositTransactionV1Async(long operatorId, string memberCode, string channel, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string bankCode, string bankName, string bankNameNative, string source) {
            return base.Channel.createFastDepositTransactionV1Async(operatorId, memberCode, channel, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, bankCode, bankName, bankNameNative, source);
        }
        
        public System.Xml.Linq.XElement createFastDepositTransactionV2(
                    long operatorId, 
                    long memberId, 
                    string memberCode, 
                    string channel, 
                    long payMethodId, 
                    string requestCurrency, 
                    decimal requestAmount, 
                    long bankAccountId, 
                    string bankAccountName, 
                    string bankAccountNumber, 
                    System.DateTime bankTransferDate, 
                    string bankReference, 
                    string bankCode, 
                    string bankName, 
                    string bankNameNative, 
                    W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createFastDepositTransactionV2(operatorId, memberId, memberCode, channel, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, bankCode, bankName, bankNameNative, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createFastDepositTransactionV2Async(
                    long operatorId, 
                    long memberId, 
                    string memberCode, 
                    string channel, 
                    long payMethodId, 
                    string requestCurrency, 
                    decimal requestAmount, 
                    long bankAccountId, 
                    string bankAccountName, 
                    string bankAccountNumber, 
                    System.DateTime bankTransferDate, 
                    string bankReference, 
                    string bankCode, 
                    string bankName, 
                    string bankNameNative, 
                    W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createFastDepositTransactionV2Async(operatorId, memberId, memberCode, channel, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, bankCode, bankName, bankNameNative, source);
        }
        
        public System.Xml.Linq.XElement createOnlineDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankCode) {
            return base.Channel.createOnlineDepositTransaction(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankCode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankCode) {
            return base.Channel.createOnlineDepositTransactionAsync(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankCode);
        }
        
        public System.Xml.Linq.XElement createOnlineDepositTransactionV1(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode) {
            return base.Channel.createOnlineDepositTransactionV1(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, source, bankCode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionV1Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode) {
            return base.Channel.createOnlineDepositTransactionV1Async(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, source, bankCode);
        }
        
        public System.Xml.Linq.XElement createOnlineDepositTransactionV2(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, string bankCode) {
            return base.Channel.createOnlineDepositTransactionV2(operatorId, memberCode, payMethodId, merchantAcctId, requestCurrency, requestAmount, bankCode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionV2Async(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, string bankCode) {
            return base.Channel.createOnlineDepositTransactionV2Async(operatorId, memberCode, payMethodId, merchantAcctId, requestCurrency, requestAmount, bankCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionResponse W88.WebRef.svcPayDeposit.IDeposit.createSDAPayTransaction(W88.WebRef.svcPayDeposit.createSDAPayTransactionRequest request) {
            return base.Channel.createSDAPayTransaction(request);
        }
        
        public System.Xml.Linq.XElement createSDAPayTransaction(long invId, decimal requestAmount, long memberId, string memberName, string bank, out string statusCode, out string statusText) {
            W88.WebRef.svcPayDeposit.createSDAPayTransactionRequest inValue = new W88.WebRef.svcPayDeposit.createSDAPayTransactionRequest();
            inValue.invId = invId;
            inValue.requestAmount = requestAmount;
            inValue.memberId = memberId;
            inValue.memberName = memberName;
            inValue.bank = bank;
            W88.WebRef.svcPayDeposit.createSDAPayTransactionResponse retVal = ((W88.WebRef.svcPayDeposit.IDeposit)(this)).createSDAPayTransaction(inValue);
            statusCode = retVal.statusCode;
            statusText = retVal.statusText;
            return retVal.createSDAPayTransactionResult;
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionResponse> createSDAPayTransactionAsync(W88.WebRef.svcPayDeposit.createSDAPayTransactionRequest request) {
            return base.Channel.createSDAPayTransactionAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfResponse W88.WebRef.svcPayDeposit.IDeposit.createSDAPayTransactionOnBehalf(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfRequest request) {
            return base.Channel.createSDAPayTransactionOnBehalf(request);
        }
        
        public System.Xml.Linq.XElement createSDAPayTransactionOnBehalf(long invId, decimal requestAmount, long memberId, string memberName, string bank, string eName, string eBankAccount, string eBank, out string statusCode, out string statusText) {
            W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfRequest inValue = new W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfRequest();
            inValue.invId = invId;
            inValue.requestAmount = requestAmount;
            inValue.memberId = memberId;
            inValue.memberName = memberName;
            inValue.bank = bank;
            inValue.eName = eName;
            inValue.eBankAccount = eBankAccount;
            inValue.eBank = eBank;
            W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfResponse retVal = ((W88.WebRef.svcPayDeposit.IDeposit)(this)).createSDAPayTransactionOnBehalf(inValue);
            statusCode = retVal.statusCode;
            statusText = retVal.statusText;
            return retVal.createSDAPayTransactionOnBehalfResult;
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfResponse> createSDAPayTransactionOnBehalfAsync(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfRequest request) {
            return base.Channel.createSDAPayTransactionOnBehalfAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Response W88.WebRef.svcPayDeposit.IDeposit.createSDAPayTransactionOnBehalfV1(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Request request) {
            return base.Channel.createSDAPayTransactionOnBehalfV1(request);
        }
        
        public System.Xml.Linq.XElement createSDAPayTransactionOnBehalfV1(long invId, decimal requestAmount, long memberId, string memberName, string bank, string eName, string eBankAccount, string eBank, string merchantId, long payMethodId, out string statusCode, out string statusText) {
            W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Request inValue = new W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Request();
            inValue.invId = invId;
            inValue.requestAmount = requestAmount;
            inValue.memberId = memberId;
            inValue.memberName = memberName;
            inValue.bank = bank;
            inValue.eName = eName;
            inValue.eBankAccount = eBankAccount;
            inValue.eBank = eBank;
            inValue.merchantId = merchantId;
            inValue.payMethodId = payMethodId;
            W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Response retVal = ((W88.WebRef.svcPayDeposit.IDeposit)(this)).createSDAPayTransactionOnBehalfV1(inValue);
            statusCode = retVal.statusCode;
            statusText = retVal.statusText;
            return retVal.createSDAPayTransactionOnBehalfV1Result;
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Response> createSDAPayTransactionOnBehalfV1Async(W88.WebRef.svcPayDeposit.createSDAPayTransactionOnBehalfV1Request request) {
            return base.Channel.createSDAPayTransactionOnBehalfV1Async(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Response W88.WebRef.svcPayDeposit.IDeposit.createSDAPayTransactionV1(W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Request request) {
            return base.Channel.createSDAPayTransactionV1(request);
        }
        
        public System.Xml.Linq.XElement createSDAPayTransactionV1(long invId, decimal requestAmount, long memberId, string memberName, string bank, string merchantId, long payMethodId, out string statusCode, out string statusText) {
            W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Request inValue = new W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Request();
            inValue.invId = invId;
            inValue.requestAmount = requestAmount;
            inValue.memberId = memberId;
            inValue.memberName = memberName;
            inValue.bank = bank;
            inValue.merchantId = merchantId;
            inValue.payMethodId = payMethodId;
            W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Response retVal = ((W88.WebRef.svcPayDeposit.IDeposit)(this)).createSDAPayTransactionV1(inValue);
            statusCode = retVal.statusCode;
            statusText = retVal.statusText;
            return retVal.createSDAPayTransactionV1Result;
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Response> createSDAPayTransactionV1Async(W88.WebRef.svcPayDeposit.createSDAPayTransactionV1Request request) {
            return base.Channel.createSDAPayTransactionV1Async(request);
        }
        
        public bool validateSDAPayTransaction(string ip, string postedParameter, string merchantId, string payMethodId) {
            return base.Channel.validateSDAPayTransaction(ip, postedParameter, merchantId, payMethodId);
        }
        
        public System.Threading.Tasks.Task<bool> validateSDAPayTransactionAsync(string ip, string postedParameter, string merchantId, string payMethodId) {
            return base.Channel.validateSDAPayTransactionAsync(ip, postedParameter, merchantId, payMethodId);
        }
        
        public System.Data.DataTable getSDAPayDepositTransaction(long invId) {
            return base.Channel.getSDAPayDepositTransaction(invId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getSDAPayDepositTransactionAsync(long invId) {
            return base.Channel.getSDAPayDepositTransactionAsync(invId);
        }
        
        public bool validateNextPayTransaction(string ip, string np_inv, string np_amt, string np_refCode, string np_merID, string nextPayId) {
            return base.Channel.validateNextPayTransaction(ip, np_inv, np_amt, np_refCode, np_merID, nextPayId);
        }
        
        public System.Threading.Tasks.Task<bool> validateNextPayTransactionAsync(string ip, string np_inv, string np_amt, string np_refCode, string np_merID, string nextPayId) {
            return base.Channel.validateNextPayTransactionAsync(ip, np_inv, np_amt, np_refCode, np_merID, nextPayId);
        }
        
        public bool validateNextPayTransactionV1(string ip, string np_inv, string np_amt, string np_refCode, string nextPayId) {
            return base.Channel.validateNextPayTransactionV1(ip, np_inv, np_amt, np_refCode, nextPayId);
        }
        
        public System.Threading.Tasks.Task<bool> validateNextPayTransactionV1Async(string ip, string np_inv, string np_amt, string np_refCode, string nextPayId) {
            return base.Channel.validateNextPayTransactionV1Async(ip, np_inv, np_amt, np_refCode, nextPayId);
        }
        
        public System.Data.DataTable getDepositTransaction(long invId) {
            return base.Channel.getDepositTransaction(invId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getDepositTransactionAsync(long invId) {
            return base.Channel.getDepositTransactionAsync(invId);
        }
        
        public bool updateDepositAmount(long invId, decimal amount) {
            return base.Channel.updateDepositAmount(invId, amount);
        }
        
        public System.Threading.Tasks.Task<bool> updateDepositAmountAsync(long invId, decimal amount) {
            return base.Channel.updateDepositAmountAsync(invId, amount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        W88.WebRef.svcPayDeposit.SMSDepositResponse W88.WebRef.svcPayDeposit.IDeposit.SMSDeposit(W88.WebRef.svcPayDeposit.SMSDepositRequest request) {
            return base.Channel.SMSDeposit(request);
        }
        
        public bool SMSDeposit(long operatorId, string memberCode, decimal amount, string bankSmsAbbr, string channel, System.DateTime bankTransferDate, out string languageCode, out string errorCode, out long transId, out string operatorCode) {
            W88.WebRef.svcPayDeposit.SMSDepositRequest inValue = new W88.WebRef.svcPayDeposit.SMSDepositRequest();
            inValue.operatorId = operatorId;
            inValue.memberCode = memberCode;
            inValue.amount = amount;
            inValue.bankSmsAbbr = bankSmsAbbr;
            inValue.channel = channel;
            inValue.bankTransferDate = bankTransferDate;
            W88.WebRef.svcPayDeposit.SMSDepositResponse retVal = ((W88.WebRef.svcPayDeposit.IDeposit)(this)).SMSDeposit(inValue);
            languageCode = retVal.languageCode;
            errorCode = retVal.errorCode;
            transId = retVal.transId;
            operatorCode = retVal.operatorCode;
            return retVal.SMSDepositResult;
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.SMSDepositResponse> SMSDepositAsync(W88.WebRef.svcPayDeposit.SMSDepositRequest request) {
            return base.Channel.SMSDepositAsync(request);
        }
        
        public bool validateBill99Transaction(
                    string ip, 
                    string domain, 
                    string merchantAcctId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string bankId, 
                    string orderId, 
                    string orderTime, 
                    string orderAmount, 
                    string dealId, 
                    string bankDealId, 
                    string dealTime, 
                    string payAmount, 
                    string fee, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errCode, 
                    string signMsg) {
            return base.Channel.validateBill99Transaction(ip, domain, merchantAcctId, version, language, signType, payType, bankId, orderId, orderTime, orderAmount, dealId, bankDealId, dealTime, payAmount, fee, ext1, ext2, payResult, errCode, signMsg);
        }
        
        public System.Threading.Tasks.Task<bool> validateBill99TransactionAsync(
                    string ip, 
                    string domain, 
                    string merchantAcctId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string bankId, 
                    string orderId, 
                    string orderTime, 
                    string orderAmount, 
                    string dealId, 
                    string bankDealId, 
                    string dealTime, 
                    string payAmount, 
                    string fee, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errCode, 
                    string signMsg) {
            return base.Channel.validateBill99TransactionAsync(ip, domain, merchantAcctId, version, language, signType, payType, bankId, orderId, orderTime, orderAmount, dealId, bankDealId, dealTime, payAmount, fee, ext1, ext2, payResult, errCode, signMsg);
        }
        
        public bool validateIPSTransaction(string ip, string domain, string billNo, string merchantCode, string ipsAmount, string currencyType, string date, string succ, string msg, string attach, string ipsBillNo, string retEncodeType, string signature, string bankBillNo) {
            return base.Channel.validateIPSTransaction(ip, domain, billNo, merchantCode, ipsAmount, currencyType, date, succ, msg, attach, ipsBillNo, retEncodeType, signature, bankBillNo);
        }
        
        public System.Threading.Tasks.Task<bool> validateIPSTransactionAsync(string ip, string domain, string billNo, string merchantCode, string ipsAmount, string currencyType, string date, string succ, string msg, string attach, string ipsBillNo, string retEncodeType, string signature, string bankBillNo) {
            return base.Channel.validateIPSTransactionAsync(ip, domain, billNo, merchantCode, ipsAmount, currencyType, date, succ, msg, attach, ipsBillNo, retEncodeType, signature, bankBillNo);
        }
        
        public System.Xml.Linq.XElement createWingDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference) {
            return base.Channel.createWingDepositTransaction(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference) {
            return base.Channel.createWingDepositTransactionAsync(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference);
        }
        
        public System.Xml.Linq.XElement createWingDepositTransactionV1(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source) {
            return base.Channel.createWingDepositTransactionV1(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionV1Async(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source) {
            return base.Channel.createWingDepositTransactionV1Async(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Xml.Linq.XElement createWingDepositTransactionV2(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createWingDepositTransactionV2(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionV2Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createWingDepositTransactionV2Async(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Xml.Linq.XElement createWingDepositTransactionV3(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createWingDepositTransactionV3(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createWingDepositTransactionV3Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createWingDepositTransactionV3Async(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Xml.Linq.XElement createMoneyTransferDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source) {
            return base.Channel.createMoneyTransferDepositTransaction(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createMoneyTransferDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, string source) {
            return base.Channel.createMoneyTransferDepositTransactionAsync(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, source);
        }
        
        public System.Xml.Linq.XElement createPayPalDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, string source) {
            return base.Channel.createPayPalDepositTransaction(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, accountName, accountEmail, transferDate, referenceId, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createPayPalDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, string source) {
            return base.Channel.createPayPalDepositTransactionAsync(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, accountName, accountEmail, transferDate, referenceId, source);
        }
        
        public System.Xml.Linq.XElement createPayPalDepositTransactionV1(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createPayPalDepositTransactionV1(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, accountName, accountEmail, transferDate, referenceId, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createPayPalDepositTransactionV1Async(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string accountName, string accountEmail, System.DateTime transferDate, string referenceId, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createPayPalDepositTransactionV1Async(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, accountName, accountEmail, transferDate, referenceId, source);
        }
        
        public short validateShengPayTransaction(
                    string ip, 
                    string domain, 
                    string Name, 
                    string Version, 
                    string Charset, 
                    string TraceNo, 
                    string MsgSender, 
                    string SendTime, 
                    string InstCode, 
                    string OrderNo, 
                    string OrderAmount, 
                    string TransNo, 
                    string TransAmount, 
                    string TransStatus, 
                    string TransType, 
                    string TransTime, 
                    string MerchantNo, 
                    string ErrorCode, 
                    string ErrorMsg, 
                    string Ext1, 
                    string SignType, 
                    string SignMsg) {
            return base.Channel.validateShengPayTransaction(ip, domain, Name, Version, Charset, TraceNo, MsgSender, SendTime, InstCode, OrderNo, OrderAmount, TransNo, TransAmount, TransStatus, TransType, TransTime, MerchantNo, ErrorCode, ErrorMsg, Ext1, SignType, SignMsg);
        }
        
        public System.Threading.Tasks.Task<short> validateShengPayTransactionAsync(
                    string ip, 
                    string domain, 
                    string Name, 
                    string Version, 
                    string Charset, 
                    string TraceNo, 
                    string MsgSender, 
                    string SendTime, 
                    string InstCode, 
                    string OrderNo, 
                    string OrderAmount, 
                    string TransNo, 
                    string TransAmount, 
                    string TransStatus, 
                    string TransType, 
                    string TransTime, 
                    string MerchantNo, 
                    string ErrorCode, 
                    string ErrorMsg, 
                    string Ext1, 
                    string SignType, 
                    string SignMsg) {
            return base.Channel.validateShengPayTransactionAsync(ip, domain, Name, Version, Charset, TraceNo, MsgSender, SendTime, InstCode, OrderNo, OrderAmount, TransNo, TransAmount, TransStatus, TransType, TransTime, MerchantNo, ErrorCode, ErrorMsg, Ext1, SignType, SignMsg);
        }
        
        public bool validateNganLuongTransaction(string ip, string domain, string merchant_site_code, string receiver, string order_code, string amount, string currency_code, string token_code, string checksum, string transactionId, string strNLAmount, string transactionStatus, string payerName, string payerEmail, string payerId) {
            return base.Channel.validateNganLuongTransaction(ip, domain, merchant_site_code, receiver, order_code, amount, currency_code, token_code, checksum, transactionId, strNLAmount, transactionStatus, payerName, payerEmail, payerId);
        }
        
        public System.Threading.Tasks.Task<bool> validateNganLuongTransactionAsync(string ip, string domain, string merchant_site_code, string receiver, string order_code, string amount, string currency_code, string token_code, string checksum, string transactionId, string strNLAmount, string transactionStatus, string payerName, string payerEmail, string payerId) {
            return base.Channel.validateNganLuongTransactionAsync(ip, domain, merchant_site_code, receiver, order_code, amount, currency_code, token_code, checksum, transactionId, strNLAmount, transactionStatus, payerName, payerEmail, payerId);
        }
        
        public System.Data.DataTable getDepositOnlineTransaction(long invId) {
            return base.Channel.getDepositOnlineTransaction(invId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getDepositOnlineTransactionAsync(long invId) {
            return base.Channel.getDepositOnlineTransactionAsync(invId);
        }
        
        public System.Xml.Linq.XElement getPac2PayBankInfo(string bank, string country, string memberCode) {
            return base.Channel.getPac2PayBankInfo(bank, country, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> getPac2PayBankInfoAsync(string bank, string country, string memberCode) {
            return base.Channel.getPac2PayBankInfoAsync(bank, country, memberCode);
        }
        
        public System.Xml.Linq.XElement createPac2PayTransaction(long invId, decimal requestAmount, long memberId, string memberName, string bank, string accountNo, string country, int compareMode, int remitMode) {
            return base.Channel.createPac2PayTransaction(invId, requestAmount, memberId, memberName, bank, accountNo, country, compareMode, remitMode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createPac2PayTransactionAsync(long invId, decimal requestAmount, long memberId, string memberName, string bank, string accountNo, string country, int compareMode, int remitMode) {
            return base.Channel.createPac2PayTransactionAsync(invId, requestAmount, memberId, memberName, bank, accountNo, country, compareMode, remitMode);
        }
        
        public string getPac2PayTransferScheme(string bank, int remitMode, string country, string memberCode) {
            return base.Channel.getPac2PayTransferScheme(bank, remitMode, country, memberCode);
        }
        
        public System.Threading.Tasks.Task<string> getPac2PayTransferSchemeAsync(string bank, int remitMode, string country, string memberCode) {
            return base.Channel.getPac2PayTransferSchemeAsync(bank, remitMode, country, memberCode);
        }
        
        public System.Data.DataTable getPac2PayDepositTransaction(long invId) {
            return base.Channel.getPac2PayDepositTransaction(invId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getPac2PayDepositTransactionAsync(long invId) {
            return base.Channel.getPac2PayDepositTransactionAsync(invId);
        }
        
        public short validatePac2PayTransaction(string ip, string postData) {
            return base.Channel.validatePac2PayTransaction(ip, postData);
        }
        
        public System.Threading.Tasks.Task<short> validatePac2PayTransactionAsync(string ip, string postData) {
            return base.Channel.validatePac2PayTransactionAsync(ip, postData);
        }
        
        public bool createNetellerTransaction(long invId, long operatorId, decimal requestAmount, string requestCurrency, long memberId, string memberCode, long accountId, int secureId) {
            return base.Channel.createNetellerTransaction(invId, operatorId, requestAmount, requestCurrency, memberId, memberCode, accountId, secureId);
        }
        
        public System.Threading.Tasks.Task<bool> createNetellerTransactionAsync(long invId, long operatorId, decimal requestAmount, string requestCurrency, long memberId, string memberCode, long accountId, int secureId) {
            return base.Channel.createNetellerTransactionAsync(invId, operatorId, requestAmount, requestCurrency, memberId, memberCode, accountId, secureId);
        }
        
        public short validateAlogateway(string ip, string transactionId, string merchantOrder, string amount, string currency, string bankCode, string bankTransactionId, string status, string message, string billingDescriptor, string firstName, string lastName, string control) {
            return base.Channel.validateAlogateway(ip, transactionId, merchantOrder, amount, currency, bankCode, bankTransactionId, status, message, billingDescriptor, firstName, lastName, control);
        }
        
        public System.Threading.Tasks.Task<short> validateAlogatewayAsync(string ip, string transactionId, string merchantOrder, string amount, string currency, string bankCode, string bankTransactionId, string status, string message, string billingDescriptor, string firstName, string lastName, string control) {
            return base.Channel.validateAlogatewayAsync(ip, transactionId, merchantOrder, amount, currency, bankCode, bankTransactionId, status, message, billingDescriptor, firstName, lastName, control);
        }
        
        public bool updateAffiliateDepositAmount(long invId, decimal amount) {
            return base.Channel.updateAffiliateDepositAmount(invId, amount);
        }
        
        public System.Threading.Tasks.Task<bool> updateAffiliateDepositAmountAsync(long invId, decimal amount) {
            return base.Channel.updateAffiliateDepositAmountAsync(invId, amount);
        }
        
        public short validateECPSSTransaction(string ip, string domain, string billNo, string amount, string succeed, string result, string signMD5info) {
            return base.Channel.validateECPSSTransaction(ip, domain, billNo, amount, succeed, result, signMD5info);
        }
        
        public System.Threading.Tasks.Task<short> validateECPSSTransactionAsync(string ip, string domain, string billNo, string amount, string succeed, string result, string signMD5info) {
            return base.Channel.validateECPSSTransactionAsync(ip, domain, billNo, amount, succeed, result, signMD5info);
        }
        
        public short validateHnapayTransaction(string ip, string domain, string orderID, string resultCode, string stateCode, string orderAmount, string payAmount, string acquiringTime, string completeTime, string orderNo, string partnerID, string remark, string charset, string signType, string signMsg) {
            return base.Channel.validateHnapayTransaction(ip, domain, orderID, resultCode, stateCode, orderAmount, payAmount, acquiringTime, completeTime, orderNo, partnerID, remark, charset, signType, signMsg);
        }
        
        public System.Threading.Tasks.Task<short> validateHnapayTransactionAsync(string ip, string domain, string orderID, string resultCode, string stateCode, string orderAmount, string payAmount, string acquiringTime, string completeTime, string orderNo, string partnerID, string remark, string charset, string signType, string signMsg) {
            return base.Channel.validateHnapayTransactionAsync(ip, domain, orderID, resultCode, stateCode, orderAmount, payAmount, acquiringTime, completeTime, orderNo, partnerID, remark, charset, signType, signMsg);
        }
        
        public short validatePay19Transaction(
                    string ip, 
                    string domain, 
                    string versionId, 
                    string merchantId, 
                    string verifyString, 
                    string orderDate, 
                    string orderId, 
                    string result, 
                    string amount, 
                    string currency, 
                    string paySq, 
                    string payDate, 
                    string pmId, 
                    string pcId, 
                    string payCardNo, 
                    string payCardPwd) {
            return base.Channel.validatePay19Transaction(ip, domain, versionId, merchantId, verifyString, orderDate, orderId, result, amount, currency, paySq, payDate, pmId, pcId, payCardNo, payCardPwd);
        }
        
        public System.Threading.Tasks.Task<short> validatePay19TransactionAsync(
                    string ip, 
                    string domain, 
                    string versionId, 
                    string merchantId, 
                    string verifyString, 
                    string orderDate, 
                    string orderId, 
                    string result, 
                    string amount, 
                    string currency, 
                    string paySq, 
                    string payDate, 
                    string pmId, 
                    string pcId, 
                    string payCardNo, 
                    string payCardPwd) {
            return base.Channel.validatePay19TransactionAsync(ip, domain, versionId, merchantId, verifyString, orderDate, orderId, result, amount, currency, paySq, payDate, pmId, pcId, payCardNo, payCardPwd);
        }
        
        public short validateAllInPayTransaction(
                    string ip, 
                    string domain, 
                    string merchantId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string issuerId, 
                    string paymentOrderId, 
                    string orderNo, 
                    string orderDatetime, 
                    string orderAmount, 
                    string payDatetime, 
                    string payAmount, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errorCode, 
                    string returnDatetime, 
                    string signMsg) {
            return base.Channel.validateAllInPayTransaction(ip, domain, merchantId, version, language, signType, payType, issuerId, paymentOrderId, orderNo, orderDatetime, orderAmount, payDatetime, payAmount, ext1, ext2, payResult, errorCode, returnDatetime, signMsg);
        }
        
        public System.Threading.Tasks.Task<short> validateAllInPayTransactionAsync(
                    string ip, 
                    string domain, 
                    string merchantId, 
                    string version, 
                    string language, 
                    string signType, 
                    string payType, 
                    string issuerId, 
                    string paymentOrderId, 
                    string orderNo, 
                    string orderDatetime, 
                    string orderAmount, 
                    string payDatetime, 
                    string payAmount, 
                    string ext1, 
                    string ext2, 
                    string payResult, 
                    string errorCode, 
                    string returnDatetime, 
                    string signMsg) {
            return base.Channel.validateAllInPayTransactionAsync(ip, domain, merchantId, version, language, signType, payType, issuerId, paymentOrderId, orderNo, orderDatetime, orderAmount, payDatetime, payAmount, ext1, ext2, payResult, errorCode, returnDatetime, signMsg);
        }
        
        public System.Xml.Linq.XElement createNextPayDepositTransaction(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string nextPayInvId, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createNextPayDepositTransaction(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, nextPayInvId, source);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createNextPayDepositTransactionAsync(long operatorId, long memberId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string nextPayInvId, W88.WebRef.svcPayDeposit.DepositSource source) {
            return base.Channel.createNextPayDepositTransactionAsync(operatorId, memberId, memberCode, payMethodId, requestCurrency, requestAmount, nextPayInvId, source);
        }
        
        public string validateSdPayTransaction(string ip, string res, string merchantAccount) {
            return base.Channel.validateSdPayTransaction(ip, res, merchantAccount);
        }
        
        public System.Threading.Tasks.Task<string> validateSdPayTransactionAsync(string ip, string res, string merchantAccount) {
            return base.Channel.validateSdPayTransactionAsync(ip, res, merchantAccount);
        }
        
        public string validateVeritransTransaction(string ip, string res) {
            return base.Channel.validateVeritransTransaction(ip, res);
        }
        
        public System.Threading.Tasks.Task<string> validateVeritransTransactionAsync(string ip, string res) {
            return base.Channel.validateVeritransTransactionAsync(ip, res);
        }
        
        public string validateYeePayTransaction(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string hmac) {
            return base.Channel.validateYeePayTransaction(ip, domain, p1_MerId, r0_Cmd, r1_Code, r2_TrxId, r3_Amt, r4_Cur, r5_Pid, r6_Order, r7_Uid, r8_MP, r9_BType, ro_BankOrderId, rp_PayDate, hmac);
        }
        
        public System.Threading.Tasks.Task<string> validateYeePayTransactionAsync(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string hmac) {
            return base.Channel.validateYeePayTransactionAsync(ip, domain, p1_MerId, r0_Cmd, r1_Code, r2_TrxId, r3_Amt, r4_Cur, r5_Pid, r6_Order, r7_Uid, r8_MP, r9_BType, ro_BankOrderId, rp_PayDate, hmac);
        }
        
        public string validateYeePayDirectTransaction(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string rb_BankId, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string rq_CardNo, 
                    string ru_Trxtime, 
                    string rq_SourceFee, 
                    string rq_TargetFee, 
                    string hmac) {
            return base.Channel.validateYeePayDirectTransaction(ip, domain, p1_MerId, r0_Cmd, r1_Code, r2_TrxId, r3_Amt, r4_Cur, r5_Pid, r6_Order, r7_Uid, r8_MP, r9_BType, rb_BankId, ro_BankOrderId, rp_PayDate, rq_CardNo, ru_Trxtime, rq_SourceFee, rq_TargetFee, hmac);
        }
        
        public System.Threading.Tasks.Task<string> validateYeePayDirectTransactionAsync(
                    string ip, 
                    string domain, 
                    string p1_MerId, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string r2_TrxId, 
                    string r3_Amt, 
                    string r4_Cur, 
                    string r5_Pid, 
                    string r6_Order, 
                    string r7_Uid, 
                    string r8_MP, 
                    string r9_BType, 
                    string rb_BankId, 
                    string ro_BankOrderId, 
                    string rp_PayDate, 
                    string rq_CardNo, 
                    string ru_Trxtime, 
                    string rq_SourceFee, 
                    string rq_TargetFee, 
                    string hmac) {
            return base.Channel.validateYeePayDirectTransactionAsync(ip, domain, p1_MerId, r0_Cmd, r1_Code, r2_TrxId, r3_Amt, r4_Cur, r5_Pid, r6_Order, r7_Uid, r8_MP, r9_BType, rb_BankId, ro_BankOrderId, rp_PayDate, rq_CardNo, ru_Trxtime, rq_SourceFee, rq_TargetFee, hmac);
        }
        
        public string validateYeePayWeChatTransaction(string ip, string requestId, string code, string amount, string status, string paydate, string errorcode, string errormsg, string sign) {
            return base.Channel.validateYeePayWeChatTransaction(ip, requestId, code, amount, status, paydate, errorcode, errormsg, sign);
        }
        
        public System.Threading.Tasks.Task<string> validateYeePayWeChatTransactionAsync(string ip, string requestId, string code, string amount, string status, string paydate, string errorcode, string errormsg, string sign) {
            return base.Channel.validateYeePayWeChatTransactionAsync(ip, requestId, code, amount, status, paydate, errorcode, errormsg, sign);
        }
        
        public string validateHelp2PayTransaction(string ip, string merchant, string reference, string currency, string amount, string language, string customer, string datetime, string note, string key, string status, string id) {
            return base.Channel.validateHelp2PayTransaction(ip, merchant, reference, currency, amount, language, customer, datetime, note, key, status, id);
        }
        
        public System.Threading.Tasks.Task<string> validateHelp2PayTransactionAsync(string ip, string merchant, string reference, string currency, string amount, string language, string customer, string datetime, string note, string key, string status, string id) {
            return base.Channel.validateHelp2PayTransactionAsync(ip, merchant, reference, currency, amount, language, customer, datetime, note, key, status, id);
        }
        
        public string validateSafePayTransaction(string ip, string domain, string userID, string orderID, string amount, string currency, string status, string hmac2) {
            return base.Channel.validateSafePayTransaction(ip, domain, userID, orderID, amount, currency, status, hmac2);
        }
        
        public System.Threading.Tasks.Task<string> validateSafePayTransactionAsync(string ip, string domain, string userID, string orderID, string amount, string currency, string status, string hmac2) {
            return base.Channel.validateSafePayTransactionAsync(ip, domain, userID, orderID, amount, currency, status, hmac2);
        }
        
        public string validateDanalPayTransaction(string ip, string cpId, string dpTrxId, string orderID, string userId, string amount, string createTime, string result, string signMD5) {
            return base.Channel.validateDanalPayTransaction(ip, cpId, dpTrxId, orderID, userId, amount, createTime, result, signMD5);
        }
        
        public System.Threading.Tasks.Task<string> validateDanalPayTransactionAsync(string ip, string cpId, string dpTrxId, string orderID, string userId, string amount, string createTime, string result, string signMD5) {
            return base.Channel.validateDanalPayTransactionAsync(ip, cpId, dpTrxId, orderID, userId, amount, createTime, result, signMD5);
        }
        
        public string validateBofoPayTransaction(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign) {
            return base.Channel.validateBofoPayTransaction(ip, memberID, terminalID, transID, result, resultDesc, factMoney, additionalInfo, succTime, md5Sign);
        }
        
        public System.Threading.Tasks.Task<string> validateBofoPayTransactionAsync(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign) {
            return base.Channel.validateBofoPayTransactionAsync(ip, memberID, terminalID, transID, result, resultDesc, factMoney, additionalInfo, succTime, md5Sign);
        }
        
        public string validateIBanqTransaction(string ip, string transactionId, string processorTransId, string amount, string currency, string status) {
            return base.Channel.validateIBanqTransaction(ip, transactionId, processorTransId, amount, currency, status);
        }
        
        public System.Threading.Tasks.Task<string> validateIBanqTransactionAsync(string ip, string transactionId, string processorTransId, string amount, string currency, string status) {
            return base.Channel.validateIBanqTransactionAsync(ip, transactionId, processorTransId, amount, currency, status);
        }
        
        public System.Xml.Linq.XElement createCreditCardTransaction(long operatorId, long memberId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string cardName, string cardNo, string cardType, string cardExpiryMonth, string cardExpiryYear, string cardSecurityCode, string issuingBank) {
            return base.Channel.createCreditCardTransaction(operatorId, memberId, memberCode, payMethodId, merchantAcctId, requestCurrency, requestAmount, source, cardName, cardNo, cardType, cardExpiryMonth, cardExpiryYear, cardSecurityCode, issuingBank);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createCreditCardTransactionAsync(long operatorId, long memberId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string cardName, string cardNo, string cardType, string cardExpiryMonth, string cardExpiryYear, string cardSecurityCode, string issuingBank) {
            return base.Channel.createCreditCardTransactionAsync(operatorId, memberId, memberCode, payMethodId, merchantAcctId, requestCurrency, requestAmount, source, cardName, cardNo, cardType, cardExpiryMonth, cardExpiryYear, cardSecurityCode, issuingBank);
        }
        
        public string validateAllDebitTransaction(string ip, string merNo, string gatewayNo, string tradeNo, string orderNo, string orderCurrency, string orderAmount, string orderStatus, string orderInfo, string signInfo) {
            return base.Channel.validateAllDebitTransaction(ip, merNo, gatewayNo, tradeNo, orderNo, orderCurrency, orderAmount, orderStatus, orderInfo, signInfo);
        }
        
        public System.Threading.Tasks.Task<string> validateAllDebitTransactionAsync(string ip, string merNo, string gatewayNo, string tradeNo, string orderNo, string orderCurrency, string orderAmount, string orderStatus, string orderInfo, string signInfo) {
            return base.Channel.validateAllDebitTransactionAsync(ip, merNo, gatewayNo, tradeNo, orderNo, orderCurrency, orderAmount, orderStatus, orderInfo, signInfo);
        }
        
        public string validateQijiPayTransaction(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign) {
            return base.Channel.validateQijiPayTransaction(ip, memberID, terminalID, transID, result, resultDesc, factMoney, additionalInfo, succTime, md5Sign);
        }
        
        public System.Threading.Tasks.Task<string> validateQijiPayTransactionAsync(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign) {
            return base.Channel.validateQijiPayTransactionAsync(ip, memberID, terminalID, transID, result, resultDesc, factMoney, additionalInfo, succTime, md5Sign);
        }
        
        public string validateChinaPnRTransaction(string ip, string cmdId, string merId, string respCode, string trxId, string ordAmt, string curCode, string pId, string ordId, string merPriv, string retType, string divDetails, string gateId, string chkValue) {
            return base.Channel.validateChinaPnRTransaction(ip, cmdId, merId, respCode, trxId, ordAmt, curCode, pId, ordId, merPriv, retType, divDetails, gateId, chkValue);
        }
        
        public System.Threading.Tasks.Task<string> validateChinaPnRTransactionAsync(string ip, string cmdId, string merId, string respCode, string trxId, string ordAmt, string curCode, string pId, string ordId, string merPriv, string retType, string divDetails, string gateId, string chkValue) {
            return base.Channel.validateChinaPnRTransactionAsync(ip, cmdId, merId, respCode, trxId, ordAmt, curCode, pId, ordId, merPriv, retType, divDetails, gateId, chkValue);
        }
        
        public string validateYeePayCardTransaction(
                    string ip, 
                    string domain, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string p1_MerId, 
                    string p2_Order, 
                    string p3_Amt, 
                    string p4_FrpId, 
                    string p5_CardNo, 
                    string p6_confirmAmount, 
                    string p7_realAmount, 
                    string p8_cardStatus, 
                    string p9_MP, 
                    string pb_BalanceAmt, 
                    string pc_BalanceAct, 
                    string hmac) {
            return base.Channel.validateYeePayCardTransaction(ip, domain, r0_Cmd, r1_Code, p1_MerId, p2_Order, p3_Amt, p4_FrpId, p5_CardNo, p6_confirmAmount, p7_realAmount, p8_cardStatus, p9_MP, pb_BalanceAmt, pc_BalanceAct, hmac);
        }
        
        public System.Threading.Tasks.Task<string> validateYeePayCardTransactionAsync(
                    string ip, 
                    string domain, 
                    string r0_Cmd, 
                    string r1_Code, 
                    string p1_MerId, 
                    string p2_Order, 
                    string p3_Amt, 
                    string p4_FrpId, 
                    string p5_CardNo, 
                    string p6_confirmAmount, 
                    string p7_realAmount, 
                    string p8_cardStatus, 
                    string p9_MP, 
                    string pb_BalanceAmt, 
                    string pc_BalanceAct, 
                    string hmac) {
            return base.Channel.validateYeePayCardTransactionAsync(ip, domain, r0_Cmd, r1_Code, p1_MerId, p2_Order, p3_Amt, p4_FrpId, p5_CardNo, p6_confirmAmount, p7_realAmount, p8_cardStatus, p9_MP, pb_BalanceAmt, pc_BalanceAct, hmac);
        }
        
        public string validateDaddyPayTransaction(
                    string ip, 
                    string type, 
                    string payTime, 
                    string bankId, 
                    string amount, 
                    string companyOrderNum, 
                    string mownecumOrderNum, 
                    string payCardNum, 
                    string payCardName, 
                    string channel, 
                    string area, 
                    string fee, 
                    string transactionCharge, 
                    string key, 
                    string depositMode, 
                    string baseInfo) {
            return base.Channel.validateDaddyPayTransaction(ip, type, payTime, bankId, amount, companyOrderNum, mownecumOrderNum, payCardNum, payCardName, channel, area, fee, transactionCharge, key, depositMode, baseInfo);
        }
        
        public System.Threading.Tasks.Task<string> validateDaddyPayTransactionAsync(
                    string ip, 
                    string type, 
                    string payTime, 
                    string bankId, 
                    string amount, 
                    string companyOrderNum, 
                    string mownecumOrderNum, 
                    string payCardNum, 
                    string payCardName, 
                    string channel, 
                    string area, 
                    string fee, 
                    string transactionCharge, 
                    string key, 
                    string depositMode, 
                    string baseInfo) {
            return base.Channel.validateDaddyPayTransactionAsync(ip, type, payTime, bankId, amount, companyOrderNum, mownecumOrderNum, payCardNum, payCardName, channel, area, fee, transactionCharge, key, depositMode, baseInfo);
        }
        
        public System.Xml.Linq.XElement createOnlineDepositTransactionV3(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode, string vendorMemberAccount) {
            return base.Channel.createOnlineDepositTransactionV3(operatorId, memberCode, payMethodId, merchantAcctId, requestCurrency, requestAmount, source, bankCode, vendorMemberAccount);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createOnlineDepositTransactionV3Async(long operatorId, string memberCode, long payMethodId, string merchantAcctId, string requestCurrency, decimal requestAmount, W88.WebRef.svcPayDeposit.DepositSource source, string bankCode, string vendorMemberAccount) {
            return base.Channel.createOnlineDepositTransactionV3Async(operatorId, memberCode, payMethodId, merchantAcctId, requestCurrency, requestAmount, source, bankCode, vendorMemberAccount);
        }
        
        public int createDaddyPayException(
                    string amount, 
                    string area, 
                    string baseInfo, 
                    string cardName, 
                    string cardNumber, 
                    string channel, 
                    string charge, 
                    string companyId, 
                    string exactTime, 
                    string fee, 
                    string key, 
                    string note, 
                    string orderNo, 
                    string paymentBank, 
                    string receivingBank, 
                    string receivingName, 
                    string type) {
            return base.Channel.createDaddyPayException(amount, area, baseInfo, cardName, cardNumber, channel, charge, companyId, exactTime, fee, key, note, orderNo, paymentBank, receivingBank, receivingName, type);
        }
        
        public System.Threading.Tasks.Task<int> createDaddyPayExceptionAsync(
                    string amount, 
                    string area, 
                    string baseInfo, 
                    string cardName, 
                    string cardNumber, 
                    string channel, 
                    string charge, 
                    string companyId, 
                    string exactTime, 
                    string fee, 
                    string key, 
                    string note, 
                    string orderNo, 
                    string paymentBank, 
                    string receivingBank, 
                    string receivingName, 
                    string type) {
            return base.Channel.createDaddyPayExceptionAsync(amount, area, baseInfo, cardName, cardNumber, channel, charge, companyId, exactTime, fee, key, note, orderNo, paymentBank, receivingBank, receivingName, type);
        }
        
        public string validateNextPayTransactionV2(string ip, string nextPayId, string inv, string amt, string merID, string refCode, string mark) {
            return base.Channel.validateNextPayTransactionV2(ip, nextPayId, inv, amt, merID, refCode, mark);
        }
        
        public System.Threading.Tasks.Task<string> validateNextPayTransactionV2Async(string ip, string nextPayId, string inv, string amt, string merID, string refCode, string mark) {
            return base.Channel.validateNextPayTransactionV2Async(ip, nextPayId, inv, amt, merID, refCode, mark);
        }
        
        public string validateSdPayARTransaction(string ip, string res, string merchantAccount) {
            return base.Channel.validateSdPayARTransaction(ip, res, merchantAccount);
        }
        
        public System.Threading.Tasks.Task<string> validateSdPayARTransactionAsync(string ip, string res, string merchantAccount) {
            return base.Channel.validateSdPayARTransactionAsync(ip, res, merchantAccount);
        }
        
        public System.Xml.Linq.XElement createMoneyTransferDepositTransactionV1(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource depositSource) {
            return base.Channel.createMoneyTransferDepositTransactionV1(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, depositSource);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> createMoneyTransferDepositTransactionV1Async(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, long bankAccountId, string bankAccountName, string bankAccountNumber, System.DateTime bankTransferDate, string bankReference, W88.WebRef.svcPayDeposit.DepositSource depositSource) {
            return base.Channel.createMoneyTransferDepositTransactionV1Async(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, bankAccountId, bankAccountName, bankAccountNumber, bankTransferDate, bankReference, depositSource);
        }
        
        public string validateKJTTransaction(
                    string ip, 
                    string domain, 
                    string notify_id, 
                    string notify_type, 
                    string notify_time, 
                    string _input_charset, 
                    string version, 
                    string outer_trade_no, 
                    string inner_trade_no, 
                    string trade_status, 
                    string trade_amount, 
                    string gmt_create, 
                    string gmt_payment, 
                    string gmt_close, 
                    string sign, 
                    string sign_type) {
            return base.Channel.validateKJTTransaction(ip, domain, notify_id, notify_type, notify_time, _input_charset, version, outer_trade_no, inner_trade_no, trade_status, trade_amount, gmt_create, gmt_payment, gmt_close, sign, sign_type);
        }
        
        public System.Threading.Tasks.Task<string> validateKJTTransactionAsync(
                    string ip, 
                    string domain, 
                    string notify_id, 
                    string notify_type, 
                    string notify_time, 
                    string _input_charset, 
                    string version, 
                    string outer_trade_no, 
                    string inner_trade_no, 
                    string trade_status, 
                    string trade_amount, 
                    string gmt_create, 
                    string gmt_payment, 
                    string gmt_close, 
                    string sign, 
                    string sign_type) {
            return base.Channel.validateKJTTransactionAsync(ip, domain, notify_id, notify_type, notify_time, _input_charset, version, outer_trade_no, inner_trade_no, trade_status, trade_amount, gmt_create, gmt_payment, gmt_close, sign, sign_type);
        }
        
        public string validateQijiPayTopUpTransaction(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign) {
            return base.Channel.validateQijiPayTopUpTransaction(ip, memberID, terminalID, transID, result, resultDesc, factMoney, additionalInfo, succTime, md5Sign);
        }
        
        public System.Threading.Tasks.Task<string> validateQijiPayTopUpTransactionAsync(string ip, string memberID, string terminalID, string transID, string result, string resultDesc, string factMoney, string additionalInfo, string succTime, string md5Sign) {
            return base.Channel.validateQijiPayTopUpTransactionAsync(ip, memberID, terminalID, transID, result, resultDesc, factMoney, additionalInfo, succTime, md5Sign);
        }
        
        public string validateYingBaoAliPayTransaction(string ip, W88.WebRef.svcPayDeposit.YingBaoAliPayCallbackResponse response) {
            return base.Channel.validateYingBaoAliPayTransaction(ip, response);
        }
        
        public System.Threading.Tasks.Task<string> validateYingBaoAliPayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.YingBaoAliPayCallbackResponse response) {
            return base.Channel.validateYingBaoAliPayTransactionAsync(ip, response);
        }
        
        public string validateEGHLTransaction(string ip, string responseId, string response, string eInv, string amount, string merchantId, string refCode, string mark) {
            return base.Channel.validateEGHLTransaction(ip, responseId, response, eInv, amount, merchantId, refCode, mark);
        }
        
        public System.Threading.Tasks.Task<string> validateEGHLTransactionAsync(string ip, string responseId, string response, string eInv, string amount, string merchantId, string refCode, string mark) {
            return base.Channel.validateEGHLTransactionAsync(ip, responseId, response, eInv, amount, merchantId, refCode, mark);
        }
        
        public string validateLefuWeChatTransaction(string ip, string domain, string apiCode, string versionCode, string currency, string amount, string handlerResult, string tradeOrderCode, string outOrderId, string inputCharset, string signType, string partner, string returnParam, string sign) {
            return base.Channel.validateLefuWeChatTransaction(ip, domain, apiCode, versionCode, currency, amount, handlerResult, tradeOrderCode, outOrderId, inputCharset, signType, partner, returnParam, sign);
        }
        
        public System.Threading.Tasks.Task<string> validateLefuWeChatTransactionAsync(string ip, string domain, string apiCode, string versionCode, string currency, string amount, string handlerResult, string tradeOrderCode, string outOrderId, string inputCharset, string signType, string partner, string returnParam, string sign) {
            return base.Channel.validateLefuWeChatTransactionAsync(ip, domain, apiCode, versionCode, currency, amount, handlerResult, tradeOrderCode, outOrderId, inputCharset, signType, partner, returnParam, sign);
        }
        
        public string validateHeePayTransaction(string ip, W88.WebRef.svcPayDeposit.HeePayCallbackResponse heepayResponse) {
            return base.Channel.validateHeePayTransaction(ip, heepayResponse);
        }
        
        public System.Threading.Tasks.Task<string> validateHeePayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.HeePayCallbackResponse heepayResponse) {
            return base.Channel.validateHeePayTransactionAsync(ip, heepayResponse);
        }
        
        public string validateBaoKimTransaction(
                    string ip, 
                    string bpnId, 
                    string orderId, 
                    string transactionId, 
                    string createdOn, 
                    string paymentType, 
                    string transactionStatus, 
                    string totalAmount, 
                    string netAmount, 
                    string feeAmount, 
                    string merchantId, 
                    string customerName, 
                    string customerEmail, 
                    string customerPhone, 
                    string customerAddress, 
                    string verifySign, 
                    string resend) {
            return base.Channel.validateBaoKimTransaction(ip, bpnId, orderId, transactionId, createdOn, paymentType, transactionStatus, totalAmount, netAmount, feeAmount, merchantId, customerName, customerEmail, customerPhone, customerAddress, verifySign, resend);
        }
        
        public System.Threading.Tasks.Task<string> validateBaoKimTransactionAsync(
                    string ip, 
                    string bpnId, 
                    string orderId, 
                    string transactionId, 
                    string createdOn, 
                    string paymentType, 
                    string transactionStatus, 
                    string totalAmount, 
                    string netAmount, 
                    string feeAmount, 
                    string merchantId, 
                    string customerName, 
                    string customerEmail, 
                    string customerPhone, 
                    string customerAddress, 
                    string verifySign, 
                    string resend) {
            return base.Channel.validateBaoKimTransactionAsync(ip, bpnId, orderId, transactionId, createdOn, paymentType, transactionStatus, totalAmount, netAmount, feeAmount, merchantId, customerName, customerEmail, customerPhone, customerAddress, verifySign, resend);
        }
        
        public string validateBaoKimWalletTransaction(long invId, string merchantAcctId, string transactionId, string otp) {
            return base.Channel.validateBaoKimWalletTransaction(invId, merchantAcctId, transactionId, otp);
        }
        
        public System.Threading.Tasks.Task<string> validateBaoKimWalletTransactionAsync(long invId, string merchantAcctId, string transactionId, string otp) {
            return base.Channel.validateBaoKimWalletTransactionAsync(invId, merchantAcctId, transactionId, otp);
        }
        
        public string validateDPWeChatTransaction(string ip, W88.WebRef.svcPayDeposit.DPWeChatCallbackResponse dpWCResponse) {
            return base.Channel.validateDPWeChatTransaction(ip, dpWCResponse);
        }
        
        public System.Threading.Tasks.Task<string> validateDPWeChatTransactionAsync(string ip, W88.WebRef.svcPayDeposit.DPWeChatCallbackResponse dpWCResponse) {
            return base.Channel.validateDPWeChatTransactionAsync(ip, dpWCResponse);
        }
        
        public string validateTongHuiPayTransaction(string ip, W88.WebRef.svcPayDeposit.TongHuiPayCallbackResponse callbackResponse) {
            return base.Channel.validateTongHuiPayTransaction(ip, callbackResponse);
        }
        
        public System.Threading.Tasks.Task<string> validateTongHuiPayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.TongHuiPayCallbackResponse callbackResponse) {
            return base.Channel.validateTongHuiPayTransactionAsync(ip, callbackResponse);
        }
        
        public string createMobileDepositTransaction(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string hashToken) {
            return base.Channel.createMobileDepositTransaction(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, hashToken);
        }
        
        public System.Threading.Tasks.Task<string> createMobileDepositTransactionAsync(long operatorId, string memberCode, long payMethodId, string requestCurrency, decimal requestAmount, string hashToken) {
            return base.Channel.createMobileDepositTransactionAsync(operatorId, memberCode, payMethodId, requestCurrency, requestAmount, hashToken);
        }
        
        public string validateJTPayTransaction(string ip, string p1_usercode, string p2_order, string p3_money, string p4_status, string p5_jtpayorder, string p6_paymethod, string p7_paychannelnum, string p8_charset, string p9_signtype, string p10_sign, string p11_remark) {
            return base.Channel.validateJTPayTransaction(ip, p1_usercode, p2_order, p3_money, p4_status, p5_jtpayorder, p6_paymethod, p7_paychannelnum, p8_charset, p9_signtype, p10_sign, p11_remark);
        }
        
        public System.Threading.Tasks.Task<string> validateJTPayTransactionAsync(string ip, string p1_usercode, string p2_order, string p3_money, string p4_status, string p5_jtpayorder, string p6_paymethod, string p7_paychannelnum, string p8_charset, string p9_signtype, string p10_sign, string p11_remark) {
            return base.Channel.validateJTPayTransactionAsync(ip, p1_usercode, p2_order, p3_money, p4_status, p5_jtpayorder, p6_paymethod, p7_paychannelnum, p8_charset, p9_signtype, p10_sign, p11_remark);
        }
        
        public string validatePayPaidTransaction(string ip, W88.WebRef.svcPayDeposit.PayPaidCallbackResponse callbackResponse) {
            return base.Channel.validatePayPaidTransaction(ip, callbackResponse);
        }
        
        public System.Threading.Tasks.Task<string> validatePayPaidTransactionAsync(string ip, W88.WebRef.svcPayDeposit.PayPaidCallbackResponse callbackResponse) {
            return base.Channel.validatePayPaidTransactionAsync(ip, callbackResponse);
        }
        
        public string validateTenalipayAlipayTransaction(string ip, W88.WebRef.svcPayDeposit.TenalipayAlipayCallbackResponse tenalipayAlipayResponse) {
            return base.Channel.validateTenalipayAlipayTransaction(ip, tenalipayAlipayResponse);
        }
        
        public System.Threading.Tasks.Task<string> validateTenalipayAlipayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.TenalipayAlipayCallbackResponse tenalipayAlipayResponse) {
            return base.Channel.validateTenalipayAlipayTransactionAsync(ip, tenalipayAlipayResponse);
        }
        
        public string validateYingBaoWeChatTransaction(string ip, W88.WebRef.svcPayDeposit.YingBaoWeChatCallbackResponse response) {
            return base.Channel.validateYingBaoWeChatTransaction(ip, response);
        }
        
        public System.Threading.Tasks.Task<string> validateYingBaoWeChatTransactionAsync(string ip, W88.WebRef.svcPayDeposit.YingBaoWeChatCallbackResponse response) {
            return base.Channel.validateYingBaoWeChatTransactionAsync(ip, response);
        }
        
        public string validateThousandPayTransaction(string ip, W88.WebRef.svcPayDeposit.ThousandPayCallbackResponse response) {
            return base.Channel.validateThousandPayTransaction(ip, response);
        }
        
        public System.Threading.Tasks.Task<string> validateThousandPayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.ThousandPayCallbackResponse response) {
            return base.Channel.validateThousandPayTransactionAsync(ip, response);
        }
        
        public string validateJutaPayTransaction(string ip, string seller, string datetime, string itemid, string itemdescription, string invoiceno, string confirmdata, string itemprice, string tranresult, string itempriceconversion) {
            return base.Channel.validateJutaPayTransaction(ip, seller, datetime, itemid, itemdescription, invoiceno, confirmdata, itemprice, tranresult, itempriceconversion);
        }
        
        public System.Threading.Tasks.Task<string> validateJutaPayTransactionAsync(string ip, string seller, string datetime, string itemid, string itemdescription, string invoiceno, string confirmdata, string itemprice, string tranresult, string itempriceconversion) {
            return base.Channel.validateJutaPayTransactionAsync(ip, seller, datetime, itemid, itemdescription, invoiceno, confirmdata, itemprice, tranresult, itempriceconversion);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionResponse W88.WebRef.svcPayDeposit.IDeposit.validateBaoKimScratchCardTransaction(W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionRequest request) {
            return base.Channel.validateBaoKimScratchCardTransaction(request);
        }
        
        public string validateBaoKimScratchCardTransaction(long invId, string merchantAcctId, string cardId, string pin, string serial, out string errorMessage) {
            W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionRequest inValue = new W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionRequest();
            inValue.invId = invId;
            inValue.merchantAcctId = merchantAcctId;
            inValue.cardId = cardId;
            inValue.pin = pin;
            inValue.serial = serial;
            W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionResponse retVal = ((W88.WebRef.svcPayDeposit.IDeposit)(this)).validateBaoKimScratchCardTransaction(inValue);
            errorMessage = retVal.errorMessage;
            return retVal.validateBaoKimScratchCardTransactionResult;
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionResponse> validateBaoKimScratchCardTransactionAsync(W88.WebRef.svcPayDeposit.validateBaoKimScratchCardTransactionRequest request) {
            return base.Channel.validateBaoKimScratchCardTransactionAsync(request);
        }
        
        public string validateShanDongAlipayTransaction(string ip, W88.WebRef.svcPayDeposit.ShanDongAliPayCallbackResponse response) {
            return base.Channel.validateShanDongAlipayTransaction(ip, response);
        }
        
        public System.Threading.Tasks.Task<string> validateShanDongAlipayTransactionAsync(string ip, W88.WebRef.svcPayDeposit.ShanDongAliPayCallbackResponse response) {
            return base.Channel.validateShanDongAlipayTransactionAsync(ip, response);
        }
        
        public string validateRfuPayWeChatTransaction(string ip, W88.WebRef.svcPayDeposit.RfuPayWeChatCallbackResponse response) {
            return base.Channel.validateRfuPayWeChatTransaction(ip, response);
        }
        
        public System.Threading.Tasks.Task<string> validateRfuPayWeChatTransactionAsync(string ip, W88.WebRef.svcPayDeposit.RfuPayWeChatCallbackResponse response) {
            return base.Channel.validateRfuPayWeChatTransactionAsync(ip, response);
        }
        
        public string validatePayTechWeChatTransaction(string ip, string appKey, string sign, string out_trade_no, string trade_no, string total_fee, string success_time, string trade_status, string result_code) {
            return base.Channel.validatePayTechWeChatTransaction(ip, appKey, sign, out_trade_no, trade_no, total_fee, success_time, trade_status, result_code);
        }
        
        public System.Threading.Tasks.Task<string> validatePayTechWeChatTransactionAsync(string ip, string appKey, string sign, string out_trade_no, string trade_no, string total_fee, string success_time, string trade_status, string result_code) {
            return base.Channel.validatePayTechWeChatTransactionAsync(ip, appKey, sign, out_trade_no, trade_no, total_fee, success_time, trade_status, result_code);
        }
    }
}
