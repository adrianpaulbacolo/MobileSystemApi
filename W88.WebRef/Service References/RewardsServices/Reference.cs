//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace W88.WebRef.RewardsServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionRequest", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(W88.WebRef.RewardsServices.RedemptionOnlineRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(W88.WebRef.RewardsServices.RedemptionNormalRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(W88.WebRef.RewardsServices.RedemptionWishlistRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(W88.WebRef.RewardsServices.RedemptionFreebetRequest))]
    public partial class RedemptionRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MemberCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorIdField;
        
        private int PointRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIdField;
        
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RiskIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MemberCode {
            get {
                return this.MemberCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MemberCodeField, value) != true)) {
                    this.MemberCodeField = value;
                    this.RaisePropertyChanged("MemberCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorIdField, value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PointRequired {
            get {
                return this.PointRequiredField;
            }
            set {
                if ((this.PointRequiredField.Equals(value) != true)) {
                    this.PointRequiredField = value;
                    this.RaisePropertyChanged("PointRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RiskId {
            get {
                return this.RiskIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RiskIdField, value) != true)) {
                    this.RiskIdField = value;
                    this.RaisePropertyChanged("RiskId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionOnlineRequest", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    public partial class RedemptionOnlineRequest : W88.WebRef.RewardsServices.RedemptionRequest {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AimIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AimId {
            get {
                return this.AimIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AimIdField, value) != true)) {
                    this.AimIdField = value;
                    this.RaisePropertyChanged("AimId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionNormalRequest", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    public partial class RedemptionNormalRequest : W88.WebRef.RewardsServices.RedemptionRequest {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactNumber {
            get {
                return this.ContactNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNumberField, value) != true)) {
                    this.ContactNumberField = value;
                    this.RaisePropertyChanged("ContactNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalCodeField, value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionWishlistRequest", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    public partial class RedemptionWishlistRequest : W88.WebRef.RewardsServices.RedemptionRequest {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactNumber {
            get {
                return this.ContactNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNumberField, value) != true)) {
                    this.ContactNumberField = value;
                    this.RaisePropertyChanged("ContactNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalCodeField, value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionFreebetRequest", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    public partial class RedemptionFreebetRequest : W88.WebRef.RewardsServices.RedemptionRequest {
        
        private decimal CreditAmountField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal CreditAmount {
            get {
                return this.CreditAmountField;
            }
            set {
                if ((this.CreditAmountField.Equals(value) != true)) {
                    this.CreditAmountField = value;
                    this.RaisePropertyChanged("CreditAmount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionResponse", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    public partial class RedemptionResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] RedemptionIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private W88.WebRef.RewardsServices.RedemptionResultEnum ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private W88.WebRef.RewardsServices.ProductTypeEnum TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] RedemptionIds {
            get {
                return this.RedemptionIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.RedemptionIdsField, value) != true)) {
                    this.RedemptionIdsField = value;
                    this.RaisePropertyChanged("RedemptionIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public W88.WebRef.RewardsServices.RedemptionResultEnum Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public W88.WebRef.RewardsServices.ProductTypeEnum Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionResultEnum", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Core.DTOs")]
    public enum RedemptionResultEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PointCheckError = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PointIsufficient = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VIPProcessingLimitReached = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LimitReached = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VIPSuccessLimitReached = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotBelongToAnyType = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConcurrencyDetected = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownError = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CurrencyMismatch = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidValidation = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Core.Domain")]
    public enum ProductTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Freebet = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wishlist = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionCartRequest", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    public partial class RedemptionCartRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MemberCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RiskIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MemberCode {
            get {
                return this.MemberCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MemberCodeField, value) != true)) {
                    this.MemberCodeField = value;
                    this.RaisePropertyChanged("MemberCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorIdField, value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RiskId {
            get {
                return this.RiskIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RiskIdField, value) != true)) {
                    this.RiskIdField = value;
                    this.RaisePropertyChanged("RiskId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionCartResponse", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message.Redemption")]
    [System.SerializableAttribute()]
    public partial class RedemptionCartResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private W88.WebRef.RewardsServices.RedemptionResponse[] RedemptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public W88.WebRef.RewardsServices.RedemptionResponse[] Redemption {
            get {
                return this.RedemptionField;
            }
            set {
                if ((object.ReferenceEquals(this.RedemptionField, value) != true)) {
                    this.RedemptionField = value;
                    this.RaisePropertyChanged("Redemption");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductRequest", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message")]
    [System.SerializableAttribute()]
    public partial class ProductRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorIdField, value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductResponse", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Contract.Message")]
    [System.SerializableAttribute()]
    public partial class ProductResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private W88.WebRef.RewardsServices.RedemptionProductDTO[] ProductsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public W88.WebRef.RewardsServices.RedemptionProductDTO[] Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedemptionProductDTO", Namespace="http://schemas.datacontract.org/2004/07/Rewards.Core.DTOs")]
    [System.SerializableAttribute()]
    public partial class RedemptionProductDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private W88.WebRef.RewardsServices.ProductTypeEnum TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointRequired {
            get {
                return this.PointRequiredField;
            }
            set {
                if ((this.PointRequiredField.Equals(value) != true)) {
                    this.PointRequiredField = value;
                    this.RaisePropertyChanged("PointRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((this.ProductIdField.Equals(value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public W88.WebRef.RewardsServices.ProductTypeEnum Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RewardsServices.IRewardsServices")]
    public interface IRewardsServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberDetails", ReplyAction="http://tempuri.org/IRewardsServices/getMemberDetailsResponse")]
        W88.WebRef.RewardsServices.getMemberDetailsResponse getMemberDetails(W88.WebRef.RewardsServices.getMemberDetailsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberDetails", ReplyAction="http://tempuri.org/IRewardsServices/getMemberDetailsResponse")]
        System.Threading.Tasks.Task<W88.WebRef.RewardsServices.getMemberDetailsResponse> getMemberDetailsAsync(W88.WebRef.RewardsServices.getMemberDetailsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCatalogueDefault", ReplyAction="http://tempuri.org/IRewardsServices/getCatalogueDefaultResponse")]
        System.Data.DataSet getCatalogueDefault(string operatorId, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCatalogueDefault", ReplyAction="http://tempuri.org/IRewardsServices/getCatalogueDefaultResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getCatalogueDefaultAsync(string operatorId, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCatalogueSearch", ReplyAction="http://tempuri.org/IRewardsServices/getCatalogueSearchResponse")]
        System.Data.DataSet getCatalogueSearch(string operatorId, string languageCode, string countryValidity, string currencyValidity, string viewValidity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCatalogueSearch", ReplyAction="http://tempuri.org/IRewardsServices/getCatalogueSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getCatalogueSearchAsync(string operatorId, string languageCode, string countryValidity, string currencyValidity, string viewValidity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDefault", ReplyAction="http://tempuri.org/IRewardsServices/getProductDefaultResponse")]
        System.Data.DataSet getProductDefault(string operatorId, string languageCode, string categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDefault", ReplyAction="http://tempuri.org/IRewardsServices/getProductDefaultResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductDefaultAsync(string operatorId, string languageCode, string categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductSearch", ReplyAction="http://tempuri.org/IRewardsServices/getProductSearchResponse")]
        System.Data.DataSet getProductSearch(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy, string PageSize, string PageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductSearch", ReplyAction="http://tempuri.org/IRewardsServices/getProductSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductSearchAsync(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy, string PageSize, string PageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductValidity", ReplyAction="http://tempuri.org/IRewardsServices/getProductValidityResponse")]
        System.Data.DataSet getProductValidity(string operatorId, string productId, string languageCode, string countryValidity, string currencyValidity, string viewValidity, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductValidity", ReplyAction="http://tempuri.org/IRewardsServices/getProductValidityResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductValidityAsync(string operatorId, string productId, string languageCode, string countryValidity, string currencyValidity, string viewValidity, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductSearchProductId", ReplyAction="http://tempuri.org/IRewardsServices/getProductSearchProductIdResponse")]
        System.Data.DataSet getProductSearchProductId(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductSearchProductId", ReplyAction="http://tempuri.org/IRewardsServices/getProductSearchProductIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductSearchProductIdAsync(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductSearchLang", ReplyAction="http://tempuri.org/IRewardsServices/getProductSearchLangResponse")]
        string getProductSearchLang(string productId, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductSearchLang", ReplyAction="http://tempuri.org/IRewardsServices/getProductSearchLangResponse")]
        System.Threading.Tasks.Task<string> getProductSearchLangAsync(string productId, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDetail", ReplyAction="http://tempuri.org/IRewardsServices/getProductDetailResponse")]
        System.Data.DataSet getProductDetail(string productId, string languageCode, string riskID, string countryValidity, string currencyValidity, string viewValidity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDetail", ReplyAction="http://tempuri.org/IRewardsServices/getProductDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductDetailAsync(string productId, string languageCode, string riskID, string countryValidity, string currencyValidity, string viewValidity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getRedemptionDetail", ReplyAction="http://tempuri.org/IRewardsServices/getRedemptionDetailResponse")]
        System.Data.DataSet getRedemptionDetail(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getRedemptionDetail", ReplyAction="http://tempuri.org/IRewardsServices/getRedemptionDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getRedemptionDetailAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberRedemptionDetail", ReplyAction="http://tempuri.org/IRewardsServices/getMemberRedemptionDetailResponse")]
        System.Data.DataSet getMemberRedemptionDetail(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberRedemptionDetail", ReplyAction="http://tempuri.org/IRewardsServices/getMemberRedemptionDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberRedemptionDetailAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemption", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionResponse")]
        void addRedemption(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string aimId, 
                    string currencyCode, 
                    double creditAmt, 
                    string remarksWishList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemption", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionResponse")]
        System.Threading.Tasks.Task addRedemptionAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string aimId, 
                    string currencyCode, 
                    double creditAmt, 
                    string remarksWishList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionNormal", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionNormalResponse")]
        string addRedemptionNormal(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionNormal", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionNormalResponse")]
        System.Threading.Tasks.Task<string> addRedemptionNormalAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebet", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebetResponse")]
        string addRedemptionFreebet(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebet", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebetResponse")]
        System.Threading.Tasks.Task<string> addRedemptionFreebetAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionWishList", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionWishListResponse")]
        string addRedemptionWishList(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string remarksWishList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionWishList", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionWishListResponse")]
        System.Threading.Tasks.Task<string> addRedemptionWishListAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string remarksWishList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionWishList2", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionWishList2Response")]
        string addRedemptionWishList2(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionWishList2", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionWishList2Response")]
        System.Threading.Tasks.Task<string> addRedemptionWishList2Async(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionOnline", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionOnlineResponse")]
        string addRedemptionOnline(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionOnline", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionOnlineResponse")]
        System.Threading.Tasks.Task<string> addRedemptionOnlineAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addLogPointsBalance", ReplyAction="http://tempuri.org/IRewardsServices/addLogPointsBalanceResponse")]
        int addLogPointsBalance(string operatorId, string memberCode, int pointsBefore, int pointsAwarded, int pointsAfter, string actionId, string redemptionId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addLogPointsBalance", ReplyAction="http://tempuri.org/IRewardsServices/addLogPointsBalanceResponse")]
        System.Threading.Tasks.Task<int> addLogPointsBalanceAsync(string operatorId, string memberCode, int pointsBefore, int pointsAwarded, int pointsAfter, string actionId, string redemptionId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointByMonth", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointByMonthResponse")]
        System.Data.DataSet getMemberPointByMonth(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointByMonth", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointByMonthResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberPointByMonthAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointByMonthNew", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointByMonthNewResponse")]
        System.Data.DataSet getMemberPointByMonthNew(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointByMonthNew", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointByMonthNewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberPointByMonthNewAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetPointsAddDeduct", ReplyAction="http://tempuri.org/IRewardsServices/GetPointsAddDeductResponse")]
        System.Data.DataSet GetPointsAddDeduct(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetPointsAddDeduct", ReplyAction="http://tempuri.org/IRewardsServices/GetPointsAddDeductResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPointsAddDeductAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getFeaturedProduct", ReplyAction="http://tempuri.org/IRewardsServices/getFeaturedProductResponse")]
        System.Data.DataSet getFeaturedProduct(string operatorId, string languageCode, string date, string countryValidity, string currencyValidity, string viewValidity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getFeaturedProduct", ReplyAction="http://tempuri.org/IRewardsServices/getFeaturedProductResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getFeaturedProductAsync(string operatorId, string languageCode, string date, string countryValidity, string currencyValidity, string viewValidity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartNormal", ReplyAction="http://tempuri.org/IRewardsServices/addCartNormalResponse")]
        string addCartNormal(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartNormal", ReplyAction="http://tempuri.org/IRewardsServices/addCartNormalResponse")]
        System.Threading.Tasks.Task<string> addCartNormalAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartFreebet", ReplyAction="http://tempuri.org/IRewardsServices/addCartFreebetResponse")]
        string addCartFreebet(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string currencyCode, double creditAmt, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartFreebet", ReplyAction="http://tempuri.org/IRewardsServices/addCartFreebetResponse")]
        System.Threading.Tasks.Task<string> addCartFreebetAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string currencyCode, double creditAmt, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartWishList", ReplyAction="http://tempuri.org/IRewardsServices/addCartWishListResponse")]
        string addCartWishList(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartWishList", ReplyAction="http://tempuri.org/IRewardsServices/addCartWishListResponse")]
        System.Threading.Tasks.Task<string> addCartWishListAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartWishList2", ReplyAction="http://tempuri.org/IRewardsServices/addCartWishList2Response")]
        string addCartWishList2(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartWishList2", ReplyAction="http://tempuri.org/IRewardsServices/addCartWishList2Response")]
        System.Threading.Tasks.Task<string> addCartWishList2Async(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartOnline", ReplyAction="http://tempuri.org/IRewardsServices/addCartOnlineResponse")]
        string addCartOnline(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string aimId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addCartOnline", ReplyAction="http://tempuri.org/IRewardsServices/addCartOnlineResponse")]
        System.Threading.Tasks.Task<string> addCartOnlineAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string aimId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCart", ReplyAction="http://tempuri.org/IRewardsServices/getCartResponse")]
        System.Data.DataSet getCart(string operatorId, string memberCode, string languageCode, string riskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCart", ReplyAction="http://tempuri.org/IRewardsServices/getCartResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getCartAsync(string operatorId, string memberCode, string languageCode, string riskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCartId", ReplyAction="http://tempuri.org/IRewardsServices/getCartIdResponse")]
        System.Data.DataSet getCartId(string operatorId, string memberCode, string riskId, string productId, int pointsRequired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCartId", ReplyAction="http://tempuri.org/IRewardsServices/getCartIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getCartIdAsync(string operatorId, string memberCode, string riskId, string productId, int pointsRequired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteCartRedeemSuccess", ReplyAction="http://tempuri.org/IRewardsServices/deleteCartRedeemSuccessResponse")]
        int deleteCartRedeemSuccess(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteCartRedeemSuccess", ReplyAction="http://tempuri.org/IRewardsServices/deleteCartRedeemSuccessResponse")]
        System.Threading.Tasks.Task<int> deleteCartRedeemSuccessAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteSingleCart", ReplyAction="http://tempuri.org/IRewardsServices/deleteSingleCartResponse")]
        int deleteSingleCart(string productId, string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteSingleCart", ReplyAction="http://tempuri.org/IRewardsServices/deleteSingleCartResponse")]
        System.Threading.Tasks.Task<int> deleteSingleCartAsync(string productId, string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteCartByID", ReplyAction="http://tempuri.org/IRewardsServices/deleteCartByIDResponse")]
        int deleteCartByID(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteCartByID", ReplyAction="http://tempuri.org/IRewardsServices/deleteCartByIDResponse")]
        System.Threading.Tasks.Task<int> deleteCartByIDAsync(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCartByProductId", ReplyAction="http://tempuri.org/IRewardsServices/getCartByProductIdResponse")]
        System.Data.DataSet getCartByProductId(string operatorId, string memberCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCartByProductId", ReplyAction="http://tempuri.org/IRewardsServices/getCartByProductIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getCartByProductIdAsync(string operatorId, string memberCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteExtraCart", ReplyAction="http://tempuri.org/IRewardsServices/deleteExtraCartResponse")]
        int deleteExtraCart(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/deleteExtraCart", ReplyAction="http://tempuri.org/IRewardsServices/deleteExtraCartResponse")]
        System.Threading.Tasks.Task<int> deleteExtraCartAsync(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberAccountByMonth", ReplyAction="http://tempuri.org/IRewardsServices/getMemberAccountByMonthResponse")]
        System.Data.DataSet getMemberAccountByMonth(string operatorId, string memberCode, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberAccountByMonth", ReplyAction="http://tempuri.org/IRewardsServices/getMemberAccountByMonthResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberAccountByMonthAsync(string operatorId, string memberCode, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberAccount", ReplyAction="http://tempuri.org/IRewardsServices/getMemberAccountResponse")]
        System.Data.DataSet getMemberAccount(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberAccount", ReplyAction="http://tempuri.org/IRewardsServices/getMemberAccountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberAccountAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getEarnProductFE", ReplyAction="http://tempuri.org/IRewardsServices/getEarnProductFEResponse")]
        System.Data.DataSet getEarnProductFE(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getEarnProductFE", ReplyAction="http://tempuri.org/IRewardsServices/getEarnProductFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getEarnProductFEAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getEarnMonthFE", ReplyAction="http://tempuri.org/IRewardsServices/getEarnMonthFEResponse")]
        System.Data.DataSet getEarnMonthFE(string operatorId, string memberCode, string walletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getEarnMonthFE", ReplyAction="http://tempuri.org/IRewardsServices/getEarnMonthFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getEarnMonthFEAsync(string operatorId, string memberCode, string walletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getEarnDetailFE", ReplyAction="http://tempuri.org/IRewardsServices/getEarnDetailFEResponse")]
        System.Data.DataSet getEarnDetailFE(string operatorId, string memberCode, string walletId, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getEarnDetailFE", ReplyAction="http://tempuri.org/IRewardsServices/getEarnDetailFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getEarnDetailFEAsync(string operatorId, string memberCode, string walletId, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getRedemptionFE", ReplyAction="http://tempuri.org/IRewardsServices/getRedemptionFEResponse")]
        System.Data.DataSet getRedemptionFE(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getRedemptionFE", ReplyAction="http://tempuri.org/IRewardsServices/getRedemptionFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getRedemptionFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getExpiredFE", ReplyAction="http://tempuri.org/IRewardsServices/getExpiredFEResponse")]
        System.Data.DataSet getExpiredFE(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getExpiredFE", ReplyAction="http://tempuri.org/IRewardsServices/getExpiredFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getExpiredFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getAdjustmentFE", ReplyAction="http://tempuri.org/IRewardsServices/getAdjustmentFEResponse")]
        System.Data.DataSet getAdjustmentFE(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getAdjustmentFE", ReplyAction="http://tempuri.org/IRewardsServices/getAdjustmentFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getAdjustmentFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDiscountFE", ReplyAction="http://tempuri.org/IRewardsServices/getProductDiscountFEResponse")]
        System.Data.DataSet getProductDiscountFE(string productId, string riskId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDiscountFE", ReplyAction="http://tempuri.org/IRewardsServices/getProductDiscountFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductDiscountFEAsync(string productId, string riskId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDefaultLang", ReplyAction="http://tempuri.org/IRewardsServices/getProductDefaultLangResponse")]
        System.Data.DataSet getProductDefaultLang(string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductDefaultLang", ReplyAction="http://tempuri.org/IRewardsServices/getProductDefaultLangResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductDefaultLangAsync(string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/CheckRedemptionLimit", ReplyAction="http://tempuri.org/IRewardsServices/CheckRedemptionLimitResponse")]
        bool CheckRedemptionLimit(string operatorId, string memberCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/CheckRedemptionLimit", ReplyAction="http://tempuri.org/IRewardsServices/CheckRedemptionLimitResponse")]
        System.Threading.Tasks.Task<bool> CheckRedemptionLimitAsync(string operatorId, string memberCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/CheckRedemptionLimitWithRedemptionQuantity", ReplyAction="http://tempuri.org/IRewardsServices/CheckRedemptionLimitWithRedemptionQuantityRes" +
            "ponse")]
        bool CheckRedemptionLimitWithRedemptionQuantity(string operatorId, string memberCode, string productId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/CheckRedemptionLimitWithRedemptionQuantity", ReplyAction="http://tempuri.org/IRewardsServices/CheckRedemptionLimitWithRedemptionQuantityRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> CheckRedemptionLimitWithRedemptionQuantityAsync(string operatorId, string memberCode, string productId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/CheckRedemptionLimitForVIPCategory", ReplyAction="http://tempuri.org/IRewardsServices/CheckRedemptionLimitForVIPCategoryResponse")]
        int CheckRedemptionLimitForVIPCategory(string operatorId, string memberCode, string vipCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/CheckRedemptionLimitForVIPCategory", ReplyAction="http://tempuri.org/IRewardsServices/CheckRedemptionLimitForVIPCategoryResponse")]
        System.Threading.Tasks.Task<int> CheckRedemptionLimitForVIPCategoryAsync(string operatorId, string memberCode, string vipCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberInfo", ReplyAction="http://tempuri.org/IRewardsServices/getMemberInfoResponse")]
        System.Data.DataSet getMemberInfo(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberInfo", ReplyAction="http://tempuri.org/IRewardsServices/getMemberInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberInfoAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelFE", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelFEResponse")]
        string getMemberPointLevelFE(string memberId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelFE", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelFEResponse")]
        System.Threading.Tasks.Task<string> getMemberPointLevelFEAsync(string memberId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelDiscount", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelDiscountResponse")]
        int getMemberPointLevelDiscount(string operatorId, string currencyCode, string pointLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelDiscount", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelDiscountResponse")]
        System.Threading.Tasks.Task<int> getMemberPointLevelDiscountAsync(string operatorId, string currencyCode, string pointLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checkRedemptionLimitDaily", ReplyAction="http://tempuri.org/IRewardsServices/checkRedemptionLimitDailyResponse")]
        int checkRedemptionLimitDaily(string operatorId, string memberCode, string productId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checkRedemptionLimitDaily", ReplyAction="http://tempuri.org/IRewardsServices/checkRedemptionLimitDailyResponse")]
        System.Threading.Tasks.Task<int> checkRedemptionLimitDailyAsync(string operatorId, string memberCode, string productId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelRange", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelRangeResponse")]
        System.Data.DataSet getMemberPointLevelRange(string operatorId, string currencyCode, long pointsRequired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelRange", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelRangeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberPointLevelRangeAsync(string operatorId, string currencyCode, long pointsRequired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberEarnFE", ReplyAction="http://tempuri.org/IRewardsServices/getMemberEarnFEResponse")]
        int getMemberEarnFE(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberEarnFE", ReplyAction="http://tempuri.org/IRewardsServices/getMemberEarnFEResponse")]
        System.Threading.Tasks.Task<int> getMemberEarnFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelRequired", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelRequiredResponse")]
        long getMemberPointLevelRequired(string operatorId, string currencyCode, string pointLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointLevelRequired", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointLevelRequiredResponse")]
        System.Threading.Tasks.Task<long> getMemberPointLevelRequiredAsync(string operatorId, string currencyCode, string pointLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFE", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEResponse")]
        System.Data.DataSet getMemberSpinWheelFE(string operatorId, string currencyCode, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFE", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEAsync(string operatorId, string currencyCode, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItem", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemResponse")]
        System.Data.DataSet getMemberSpinWheelFEItem(string operatorId, string currencyCode, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItem", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEItemAsync(string operatorId, string currencyCode, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemByProductId", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemByProductIdResponse")]
        System.Data.DataSet getMemberSpinWheelFEItemByProductId(string memberId, string currencyCode, string languageCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemByProductId", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemByProductIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEItemByProductIdAsync(string memberId, string currencyCode, string languageCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addLogSpinWheel", ReplyAction="http://tempuri.org/IRewardsServices/addLogSpinWheelResponse")]
        string addLogSpinWheel(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addLogSpinWheel", ReplyAction="http://tempuri.org/IRewardsServices/addLogSpinWheelResponse")]
        System.Threading.Tasks.Task<string> addLogSpinWheelAsync(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/updateLogSpinWheel", ReplyAction="http://tempuri.org/IRewardsServices/updateLogSpinWheelResponse")]
        int updateLogSpinWheel(string logSpinId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/updateLogSpinWheel", ReplyAction="http://tempuri.org/IRewardsServices/updateLogSpinWheelResponse")]
        System.Threading.Tasks.Task<int> updateLogSpinWheelAsync(string logSpinId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelCount", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountResponse")]
        int getMemberSpinWheelCount(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelCount", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountResponse")]
        System.Threading.Tasks.Task<int> getMemberSpinWheelCountAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOB", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOBResponse")]
        int getMemberSpinWheelCountDOB(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOB", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOBResponse")]
        System.Threading.Tasks.Task<int> getMemberSpinWheelCountDOBAsync(string operatorId, string memberCode, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOB_revised", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOB_revisedResponse")]
        int getMemberSpinWheelCountDOB_revised(string operatorId, string memberCode, int currentYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOB_revised", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelCountDOB_revisedResponse")]
        System.Threading.Tasks.Task<int> getMemberSpinWheelCountDOB_revisedAsync(string operatorId, string memberCode, int currentYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberDOB", ReplyAction="http://tempuri.org/IRewardsServices/getMemberDOBResponse")]
        System.Data.DataSet getMemberDOB(string memberId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberDOB", ReplyAction="http://tempuri.org/IRewardsServices/getMemberDOBResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberDOBAsync(string memberId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductPoint", ReplyAction="http://tempuri.org/IRewardsServices/getProductPointResponse")]
        System.Data.DataSet getProductPoint(string operatorId, string productId, string riskId, string currencyCode, string pointLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getProductPoint", ReplyAction="http://tempuri.org/IRewardsServices/getProductPointResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductPointAsync(string operatorId, string productId, string riskId, string currencyCode, string pointLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebetRevised", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebetRevisedResponse")]
        string addRedemptionFreebetRevised(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string currencyCode, 
                    double creditAmt, 
                    int redemptionStatus, 
                    string remarksAdmin, 
                    string spinWheelPrize, 
                    int pointsBefore, 
                    int pointsAwarded, 
                    int pointsAfter, 
                    string actionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebetRevised", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebetRevisedResponse")]
        System.Threading.Tasks.Task<string> addRedemptionFreebetRevisedAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string currencyCode, 
                    double creditAmt, 
                    int redemptionStatus, 
                    string remarksAdmin, 
                    string spinWheelPrize, 
                    int pointsBefore, 
                    int pointsAwarded, 
                    int pointsAfter, 
                    string actionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointsBefore", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointsBeforeResponse")]
        int getMemberPointsBefore(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberPointsBefore", ReplyAction="http://tempuri.org/IRewardsServices/getMemberPointsBeforeResponse")]
        System.Threading.Tasks.Task<int> getMemberPointsBeforeAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelInfo", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelInfoResponse")]
        System.Data.DataSet getMemberSpinWheelInfo(string memberId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelInfo", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelInfoAsync(string memberId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberInfoSpinWheelEligible", ReplyAction="http://tempuri.org/IRewardsServices/getMemberInfoSpinWheelEligibleResponse")]
        System.Data.DataSet getMemberInfoSpinWheelEligible(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberInfoSpinWheelEligible", ReplyAction="http://tempuri.org/IRewardsServices/getMemberInfoSpinWheelEligibleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberInfoSpinWheelEligibleAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelEligible", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelEligibleResponse")]
        bool getMemberSpinWheelEligible(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelEligible", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelEligibleResponse")]
        System.Threading.Tasks.Task<bool> getMemberSpinWheelEligibleAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checkSWPrizeMax", ReplyAction="http://tempuri.org/IRewardsServices/checkSWPrizeMaxResponse")]
        int checkSWPrizeMax(string operatorId, string currencyCode, string productId, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checkSWPrizeMax", ReplyAction="http://tempuri.org/IRewardsServices/checkSWPrizeMaxResponse")]
        System.Threading.Tasks.Task<int> checkSWPrizeMaxAsync(string operatorId, string currencyCode, string productId, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addAdjustmentAutoCredit", ReplyAction="http://tempuri.org/IRewardsServices/addAdjustmentAutoCreditResponse")]
        int addAdjustmentAutoCredit(string adjustmentCategoryId, string memberCode, string operatorId, int pointsAdjusted, string remarks, string actionId, string createdBy, int pointsBefore, int pointsAwarded, int pointsAfter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addAdjustmentAutoCredit", ReplyAction="http://tempuri.org/IRewardsServices/addAdjustmentAutoCreditResponse")]
        System.Threading.Tasks.Task<int> addAdjustmentAutoCreditAsync(string adjustmentCategoryId, string memberCode, string operatorId, int pointsAdjusted, string remarks, string actionId, string createdBy, int pointsBefore, int pointsAwarded, int pointsAfter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionAutoCredit", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionAutoCreditResponse")]
        string addRedemptionAutoCredit(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionAutoCredit", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionAutoCreditResponse")]
        System.Threading.Tasks.Task<string> addRedemptionAutoCreditAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getlogSpinWheelSingle", ReplyAction="http://tempuri.org/IRewardsServices/getlogSpinWheelSingleResponse")]
        int getlogSpinWheelSingle(string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getlogSpinWheelSingle", ReplyAction="http://tempuri.org/IRewardsServices/getlogSpinWheelSingleResponse")]
        System.Threading.Tasks.Task<int> getlogSpinWheelSingleAsync(string spinWheelPrize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checklogSpinWheel", ReplyAction="http://tempuri.org/IRewardsServices/checklogSpinWheelResponse")]
        int checklogSpinWheel(string spinWheelPrize, string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checklogSpinWheel", ReplyAction="http://tempuri.org/IRewardsServices/checklogSpinWheelResponse")]
        System.Threading.Tasks.Task<int> checklogSpinWheelAsync(string spinWheelPrize, string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemV2", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemV2Response")]
        System.Data.DataSet getMemberSpinWheelFEItemV2(string operatorId, string memberCode, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemV2", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEItemV2Response")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEItemV2Async(string operatorId, string memberCode, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEV2", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEV2Response")]
        System.Data.DataSet getMemberSpinWheelFEV2(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEV2", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelFEV2Response")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEV2Async(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelWinItem", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelWinItemResponse")]
        System.Data.DataSet getMemberSpinWheelWinItem(string operatorId, string memberCode, string languageCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getMemberSpinWheelWinItem", ReplyAction="http://tempuri.org/IRewardsServices/getMemberSpinWheelWinItemResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelWinItemAsync(string operatorId, string memberCode, string languageCode, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checkWinProductPercentage", ReplyAction="http://tempuri.org/IRewardsServices/checkWinProductPercentageResponse")]
        int checkWinProductPercentage(string productId, string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/checkWinProductPercentage", ReplyAction="http://tempuri.org/IRewardsServices/checkWinProductPercentageResponse")]
        System.Threading.Tasks.Task<int> checkWinProductPercentageAsync(string productId, string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addLogSpinWheel2", ReplyAction="http://tempuri.org/IRewardsServices/addLogSpinWheel2Response")]
        string addLogSpinWheel2(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy, string createdDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addLogSpinWheel2", ReplyAction="http://tempuri.org/IRewardsServices/addLogSpinWheel2Response")]
        System.Threading.Tasks.Task<string> addLogSpinWheel2Async(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy, string createdDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebet2", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebet2Response")]
        string addRedemptionFreebet2(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, string createdDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebet2", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebet2Response")]
        System.Threading.Tasks.Task<string> addRedemptionFreebet2Async(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, string createdDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebet3", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebet3Response")]
        string addRedemptionFreebet3(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebet3", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebet3Response")]
        System.Threading.Tasks.Task<string> addRedemptionFreebet3Async(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/updateRedemptionFreebet", ReplyAction="http://tempuri.org/IRewardsServices/updateRedemptionFreebetResponse")]
        int updateRedemptionFreebet(string redemptionId, int redemptionStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/updateRedemptionFreebet", ReplyAction="http://tempuri.org/IRewardsServices/updateRedemptionFreebetResponse")]
        System.Threading.Tasks.Task<int> updateRedemptionFreebetAsync(string redemptionId, int redemptionStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionNormalNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionNormalNewResponse")]
        string addRedemptionNormalNew(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionNormalNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionNormalNewResponse")]
        System.Threading.Tasks.Task<string> addRedemptionNormalNewAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebetNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebetNewResponse")]
        string addRedemptionFreebetNew(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionFreebetNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionFreebetNewResponse")]
        System.Threading.Tasks.Task<string> addRedemptionFreebetNewAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionWishList2New", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionWishList2NewResponse")]
        string addRedemptionWishList2New(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionWishList2New", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionWishList2NewResponse")]
        System.Threading.Tasks.Task<string> addRedemptionWishList2NewAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionOnlineNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionOnlineNewResponse")]
        string addRedemptionOnlineNew(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionOnlineNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionOnlineNewResponse")]
        System.Threading.Tasks.Task<string> addRedemptionOnlineNewAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCategoryName", ReplyAction="http://tempuri.org/IRewardsServices/getCategoryNameResponse")]
        string getCategoryName(string categoryId, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/getCategoryName", ReplyAction="http://tempuri.org/IRewardsServices/getCategoryNameResponse")]
        System.Threading.Tasks.Task<string> getCategoryNameAsync(string categoryId, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionAutoCreditNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionAutoCreditNewResponse")]
        string addRedemptionAutoCreditNew(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/addRedemptionAutoCreditNew", ReplyAction="http://tempuri.org/IRewardsServices/addRedemptionAutoCreditNewResponse")]
        System.Threading.Tasks.Task<string> addRedemptionAutoCreditNewAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt, int redemptionSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetExpirationPoint", ReplyAction="http://tempuri.org/IRewardsServices/GetExpirationPointResponse")]
        int GetExpirationPoint(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetExpirationPoint", ReplyAction="http://tempuri.org/IRewardsServices/GetExpirationPointResponse")]
        System.Threading.Tasks.Task<int> GetExpirationPointAsync(string operatorId, string memberCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetPointExpirationByRiskId", ReplyAction="http://tempuri.org/IRewardsServices/GetPointExpirationByRiskIdResponse")]
        System.Nullable<int> GetPointExpirationByRiskId(string operatorId, string riskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetPointExpirationByRiskId", ReplyAction="http://tempuri.org/IRewardsServices/GetPointExpirationByRiskIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> GetPointExpirationByRiskIdAsync(string operatorId, string riskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetAging", ReplyAction="http://tempuri.org/IRewardsServices/GetAgingResponse")]
        System.Data.DataSet GetAging(string operatorId, string memberCode, string riskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetAging", ReplyAction="http://tempuri.org/IRewardsServices/GetAgingResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAgingAsync(string operatorId, string memberCode, string riskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionFreebet", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionFreebetResponse")]
        W88.WebRef.RewardsServices.RedemptionResponse RedemptionFreebet(W88.WebRef.RewardsServices.RedemptionFreebetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionFreebet", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionFreebetResponse")]
        System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionFreebetAsync(W88.WebRef.RewardsServices.RedemptionFreebetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionOnline", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionOnlineResponse")]
        W88.WebRef.RewardsServices.RedemptionResponse RedemptionOnline(W88.WebRef.RewardsServices.RedemptionOnlineRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionOnline", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionOnlineResponse")]
        System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionOnlineAsync(W88.WebRef.RewardsServices.RedemptionOnlineRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionNormal", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionNormalResponse")]
        W88.WebRef.RewardsServices.RedemptionResponse RedemptionNormal(W88.WebRef.RewardsServices.RedemptionNormalRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionNormal", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionNormalResponse")]
        System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionNormalAsync(W88.WebRef.RewardsServices.RedemptionNormalRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionWishlist", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionWishlistResponse")]
        W88.WebRef.RewardsServices.RedemptionResponse RedemptionWishlist(W88.WebRef.RewardsServices.RedemptionWishlistRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionWishlist", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionWishlistResponse")]
        System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionWishlistAsync(W88.WebRef.RewardsServices.RedemptionWishlistRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionCart", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionCartResponse")]
        W88.WebRef.RewardsServices.RedemptionCartResponse RedemptionCart(W88.WebRef.RewardsServices.RedemptionCartRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/RedemptionCart", ReplyAction="http://tempuri.org/IRewardsServices/RedemptionCartResponse")]
        System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionCartResponse> RedemptionCartAsync(W88.WebRef.RewardsServices.RedemptionCartRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetProducts", ReplyAction="http://tempuri.org/IRewardsServices/GetProductsResponse")]
        W88.WebRef.RewardsServices.ProductResponse GetProducts(W88.WebRef.RewardsServices.ProductRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRewardsServices/GetProducts", ReplyAction="http://tempuri.org/IRewardsServices/GetProductsResponse")]
        System.Threading.Tasks.Task<W88.WebRef.RewardsServices.ProductResponse> GetProductsAsync(W88.WebRef.RewardsServices.ProductRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getMemberDetails", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getMemberDetailsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string operatorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string memberCode;
        
        public getMemberDetailsRequest() {
        }
        
        public getMemberDetailsRequest(string operatorId, string memberCode) {
            this.operatorId = operatorId;
            this.memberCode = memberCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getMemberDetailsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getMemberDetailsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable getMemberDetailsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string processCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string processText;
        
        public getMemberDetailsResponse() {
        }
        
        public getMemberDetailsResponse(System.Data.DataTable getMemberDetailsResult, string processCode, string processText) {
            this.getMemberDetailsResult = getMemberDetailsResult;
            this.processCode = processCode;
            this.processText = processText;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRewardsServicesChannel : W88.WebRef.RewardsServices.IRewardsServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RewardsServicesClient : System.ServiceModel.ClientBase<W88.WebRef.RewardsServices.IRewardsServices>, W88.WebRef.RewardsServices.IRewardsServices {
        
        public RewardsServicesClient() {
        }
        
        public RewardsServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RewardsServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RewardsServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RewardsServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        W88.WebRef.RewardsServices.getMemberDetailsResponse W88.WebRef.RewardsServices.IRewardsServices.getMemberDetails(W88.WebRef.RewardsServices.getMemberDetailsRequest request) {
            return base.Channel.getMemberDetails(request);
        }
        
        public System.Data.DataTable getMemberDetails(string operatorId, string memberCode, out string processCode, out string processText) {
            W88.WebRef.RewardsServices.getMemberDetailsRequest inValue = new W88.WebRef.RewardsServices.getMemberDetailsRequest();
            inValue.operatorId = operatorId;
            inValue.memberCode = memberCode;
            W88.WebRef.RewardsServices.getMemberDetailsResponse retVal = ((W88.WebRef.RewardsServices.IRewardsServices)(this)).getMemberDetails(inValue);
            processCode = retVal.processCode;
            processText = retVal.processText;
            return retVal.getMemberDetailsResult;
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.RewardsServices.getMemberDetailsResponse> getMemberDetailsAsync(W88.WebRef.RewardsServices.getMemberDetailsRequest request) {
            return base.Channel.getMemberDetailsAsync(request);
        }
        
        public System.Data.DataSet getCatalogueDefault(string operatorId, string languageCode) {
            return base.Channel.getCatalogueDefault(operatorId, languageCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getCatalogueDefaultAsync(string operatorId, string languageCode) {
            return base.Channel.getCatalogueDefaultAsync(operatorId, languageCode);
        }
        
        public System.Data.DataSet getCatalogueSearch(string operatorId, string languageCode, string countryValidity, string currencyValidity, string viewValidity) {
            return base.Channel.getCatalogueSearch(operatorId, languageCode, countryValidity, currencyValidity, viewValidity);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getCatalogueSearchAsync(string operatorId, string languageCode, string countryValidity, string currencyValidity, string viewValidity) {
            return base.Channel.getCatalogueSearchAsync(operatorId, languageCode, countryValidity, currencyValidity, viewValidity);
        }
        
        public System.Data.DataSet getProductDefault(string operatorId, string languageCode, string categoryId) {
            return base.Channel.getProductDefault(operatorId, languageCode, categoryId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductDefaultAsync(string operatorId, string languageCode, string categoryId) {
            return base.Channel.getProductDefaultAsync(operatorId, languageCode, categoryId);
        }
        
        public System.Data.DataSet getProductSearch(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy, string PageSize, string PageNum) {
            return base.Channel.getProductSearch(operatorId, categoryId, languageCode, pointsFrom, pointsTo, seachText, countryValidity, currencyValidity, viewValidity, date, sortBy, PageSize, PageNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductSearchAsync(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy, string PageSize, string PageNum) {
            return base.Channel.getProductSearchAsync(operatorId, categoryId, languageCode, pointsFrom, pointsTo, seachText, countryValidity, currencyValidity, viewValidity, date, sortBy, PageSize, PageNum);
        }
        
        public System.Data.DataSet getProductValidity(string operatorId, string productId, string languageCode, string countryValidity, string currencyValidity, string viewValidity, string date) {
            return base.Channel.getProductValidity(operatorId, productId, languageCode, countryValidity, currencyValidity, viewValidity, date);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductValidityAsync(string operatorId, string productId, string languageCode, string countryValidity, string currencyValidity, string viewValidity, string date) {
            return base.Channel.getProductValidityAsync(operatorId, productId, languageCode, countryValidity, currencyValidity, viewValidity, date);
        }
        
        public System.Data.DataSet getProductSearchProductId(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy) {
            return base.Channel.getProductSearchProductId(operatorId, categoryId, languageCode, pointsFrom, pointsTo, seachText, countryValidity, currencyValidity, viewValidity, date, sortBy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductSearchProductIdAsync(string operatorId, string categoryId, string languageCode, int pointsFrom, int pointsTo, string seachText, string countryValidity, string currencyValidity, string viewValidity, string date, string sortBy) {
            return base.Channel.getProductSearchProductIdAsync(operatorId, categoryId, languageCode, pointsFrom, pointsTo, seachText, countryValidity, currencyValidity, viewValidity, date, sortBy);
        }
        
        public string getProductSearchLang(string productId, string languageCode) {
            return base.Channel.getProductSearchLang(productId, languageCode);
        }
        
        public System.Threading.Tasks.Task<string> getProductSearchLangAsync(string productId, string languageCode) {
            return base.Channel.getProductSearchLangAsync(productId, languageCode);
        }
        
        public System.Data.DataSet getProductDetail(string productId, string languageCode, string riskID, string countryValidity, string currencyValidity, string viewValidity) {
            return base.Channel.getProductDetail(productId, languageCode, riskID, countryValidity, currencyValidity, viewValidity);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductDetailAsync(string productId, string languageCode, string riskID, string countryValidity, string currencyValidity, string viewValidity) {
            return base.Channel.getProductDetailAsync(productId, languageCode, riskID, countryValidity, currencyValidity, viewValidity);
        }
        
        public System.Data.DataSet getRedemptionDetail(string operatorId, string memberCode) {
            return base.Channel.getRedemptionDetail(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getRedemptionDetailAsync(string operatorId, string memberCode) {
            return base.Channel.getRedemptionDetailAsync(operatorId, memberCode);
        }
        
        public System.Data.DataSet getMemberRedemptionDetail(string operatorId, string memberCode) {
            return base.Channel.getMemberRedemptionDetail(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberRedemptionDetailAsync(string operatorId, string memberCode) {
            return base.Channel.getMemberRedemptionDetailAsync(operatorId, memberCode);
        }
        
        public void addRedemption(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string aimId, 
                    string currencyCode, 
                    double creditAmt, 
                    string remarksWishList) {
            base.Channel.addRedemption(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, aimId, currencyCode, creditAmt, remarksWishList);
        }
        
        public System.Threading.Tasks.Task addRedemptionAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string aimId, 
                    string currencyCode, 
                    double creditAmt, 
                    string remarksWishList) {
            return base.Channel.addRedemptionAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, aimId, currencyCode, creditAmt, remarksWishList);
        }
        
        public string addRedemptionNormal(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string spinWheelPrize) {
            return base.Channel.addRedemptionNormal(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionNormalAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string spinWheelPrize) {
            return base.Channel.addRedemptionNormalAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize);
        }
        
        public string addRedemptionFreebet(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize) {
            return base.Channel.addRedemptionFreebet(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionFreebetAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize) {
            return base.Channel.addRedemptionFreebetAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize);
        }
        
        public string addRedemptionWishList(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string remarksWishList) {
            return base.Channel.addRedemptionWishList(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, remarksWishList);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionWishListAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string remarksWishList) {
            return base.Channel.addRedemptionWishListAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, remarksWishList);
        }
        
        public string addRedemptionWishList2(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize) {
            return base.Channel.addRedemptionWishList2(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, remarksWishList, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionWishList2Async(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize) {
            return base.Channel.addRedemptionWishList2Async(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, remarksWishList, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize);
        }
        
        public string addRedemptionOnline(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize) {
            return base.Channel.addRedemptionOnline(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, aimId, spinWheelPrize);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionOnlineAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize) {
            return base.Channel.addRedemptionOnlineAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, aimId, spinWheelPrize);
        }
        
        public int addLogPointsBalance(string operatorId, string memberCode, int pointsBefore, int pointsAwarded, int pointsAfter, string actionId, string redemptionId, string createdBy) {
            return base.Channel.addLogPointsBalance(operatorId, memberCode, pointsBefore, pointsAwarded, pointsAfter, actionId, redemptionId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> addLogPointsBalanceAsync(string operatorId, string memberCode, int pointsBefore, int pointsAwarded, int pointsAfter, string actionId, string redemptionId, string createdBy) {
            return base.Channel.addLogPointsBalanceAsync(operatorId, memberCode, pointsBefore, pointsAwarded, pointsAfter, actionId, redemptionId, createdBy);
        }
        
        public System.Data.DataSet getMemberPointByMonth(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberPointByMonth(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberPointByMonthAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberPointByMonthAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Data.DataSet getMemberPointByMonthNew(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberPointByMonthNew(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberPointByMonthNewAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberPointByMonthNewAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Data.DataSet GetPointsAddDeduct(string operatorId, string memberCode) {
            return base.Channel.GetPointsAddDeduct(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPointsAddDeductAsync(string operatorId, string memberCode) {
            return base.Channel.GetPointsAddDeductAsync(operatorId, memberCode);
        }
        
        public System.Data.DataSet getFeaturedProduct(string operatorId, string languageCode, string date, string countryValidity, string currencyValidity, string viewValidity) {
            return base.Channel.getFeaturedProduct(operatorId, languageCode, date, countryValidity, currencyValidity, viewValidity);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getFeaturedProductAsync(string operatorId, string languageCode, string date, string countryValidity, string currencyValidity, string viewValidity) {
            return base.Channel.getFeaturedProductAsync(operatorId, languageCode, date, countryValidity, currencyValidity, viewValidity);
        }
        
        public string addCartNormal(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string createdBy) {
            return base.Channel.addCartNormal(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, createdBy);
        }
        
        public System.Threading.Tasks.Task<string> addCartNormalAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact, string createdBy) {
            return base.Channel.addCartNormalAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, createdBy);
        }
        
        public string addCartFreebet(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string currencyCode, double creditAmt, string createdBy) {
            return base.Channel.addCartFreebet(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, currencyCode, creditAmt, createdBy);
        }
        
        public System.Threading.Tasks.Task<string> addCartFreebetAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string currencyCode, double creditAmt, string createdBy) {
            return base.Channel.addCartFreebetAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, currencyCode, creditAmt, createdBy);
        }
        
        public string addCartWishList(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy) {
            return base.Channel.addCartWishList(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, remarksWishList, createdBy);
        }
        
        public System.Threading.Tasks.Task<string> addCartWishListAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy) {
            return base.Channel.addCartWishListAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, remarksWishList, createdBy);
        }
        
        public string addCartWishList2(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact) {
            return base.Channel.addCartWishList2(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, remarksWishList, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact);
        }
        
        public System.Threading.Tasks.Task<string> addCartWishList2Async(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string remarksWishList, string createdBy, string recipientName, string recipientAddress, string recipientPostal, string recipientCity, string recipientCountry, string recipientContact) {
            return base.Channel.addCartWishList2Async(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, remarksWishList, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact);
        }
        
        public string addCartOnline(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string aimId, string createdBy) {
            return base.Channel.addCartOnline(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, aimId, createdBy);
        }
        
        public System.Threading.Tasks.Task<string> addCartOnlineAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string aimId, string createdBy) {
            return base.Channel.addCartOnlineAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, aimId, createdBy);
        }
        
        public System.Data.DataSet getCart(string operatorId, string memberCode, string languageCode, string riskID) {
            return base.Channel.getCart(operatorId, memberCode, languageCode, riskID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getCartAsync(string operatorId, string memberCode, string languageCode, string riskID) {
            return base.Channel.getCartAsync(operatorId, memberCode, languageCode, riskID);
        }
        
        public System.Data.DataSet getCartId(string operatorId, string memberCode, string riskId, string productId, int pointsRequired) {
            return base.Channel.getCartId(operatorId, memberCode, riskId, productId, pointsRequired);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getCartIdAsync(string operatorId, string memberCode, string riskId, string productId, int pointsRequired) {
            return base.Channel.getCartIdAsync(operatorId, memberCode, riskId, productId, pointsRequired);
        }
        
        public int deleteCartRedeemSuccess(string operatorId, string memberCode) {
            return base.Channel.deleteCartRedeemSuccess(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<int> deleteCartRedeemSuccessAsync(string operatorId, string memberCode) {
            return base.Channel.deleteCartRedeemSuccessAsync(operatorId, memberCode);
        }
        
        public int deleteSingleCart(string productId, string operatorId, string memberCode) {
            return base.Channel.deleteSingleCart(productId, operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<int> deleteSingleCartAsync(string productId, string operatorId, string memberCode) {
            return base.Channel.deleteSingleCartAsync(productId, operatorId, memberCode);
        }
        
        public int deleteCartByID(string cartId) {
            return base.Channel.deleteCartByID(cartId);
        }
        
        public System.Threading.Tasks.Task<int> deleteCartByIDAsync(string cartId) {
            return base.Channel.deleteCartByIDAsync(cartId);
        }
        
        public System.Data.DataSet getCartByProductId(string operatorId, string memberCode, string productId) {
            return base.Channel.getCartByProductId(operatorId, memberCode, productId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getCartByProductIdAsync(string operatorId, string memberCode, string productId) {
            return base.Channel.getCartByProductIdAsync(operatorId, memberCode, productId);
        }
        
        public int deleteExtraCart(string cartId) {
            return base.Channel.deleteExtraCart(cartId);
        }
        
        public System.Threading.Tasks.Task<int> deleteExtraCartAsync(string cartId) {
            return base.Channel.deleteExtraCartAsync(cartId);
        }
        
        public System.Data.DataSet getMemberAccountByMonth(string operatorId, string memberCode, int month, int year) {
            return base.Channel.getMemberAccountByMonth(operatorId, memberCode, month, year);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberAccountByMonthAsync(string operatorId, string memberCode, int month, int year) {
            return base.Channel.getMemberAccountByMonthAsync(operatorId, memberCode, month, year);
        }
        
        public System.Data.DataSet getMemberAccount(string operatorId, string memberCode) {
            return base.Channel.getMemberAccount(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberAccountAsync(string operatorId, string memberCode) {
            return base.Channel.getMemberAccountAsync(operatorId, memberCode);
        }
        
        public System.Data.DataSet getEarnProductFE(string operatorId, string memberCode) {
            return base.Channel.getEarnProductFE(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getEarnProductFEAsync(string operatorId, string memberCode) {
            return base.Channel.getEarnProductFEAsync(operatorId, memberCode);
        }
        
        public System.Data.DataSet getEarnMonthFE(string operatorId, string memberCode, string walletId) {
            return base.Channel.getEarnMonthFE(operatorId, memberCode, walletId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getEarnMonthFEAsync(string operatorId, string memberCode, string walletId) {
            return base.Channel.getEarnMonthFEAsync(operatorId, memberCode, walletId);
        }
        
        public System.Data.DataSet getEarnDetailFE(string operatorId, string memberCode, string walletId, int month, int year) {
            return base.Channel.getEarnDetailFE(operatorId, memberCode, walletId, month, year);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getEarnDetailFEAsync(string operatorId, string memberCode, string walletId, int month, int year) {
            return base.Channel.getEarnDetailFEAsync(operatorId, memberCode, walletId, month, year);
        }
        
        public System.Data.DataSet getRedemptionFE(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getRedemptionFE(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getRedemptionFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getRedemptionFEAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Data.DataSet getExpiredFE(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getExpiredFE(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getExpiredFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getExpiredFEAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Data.DataSet getAdjustmentFE(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getAdjustmentFE(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getAdjustmentFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getAdjustmentFEAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Data.DataSet getProductDiscountFE(string productId, string riskId, string date) {
            return base.Channel.getProductDiscountFE(productId, riskId, date);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductDiscountFEAsync(string productId, string riskId, string date) {
            return base.Channel.getProductDiscountFEAsync(productId, riskId, date);
        }
        
        public System.Data.DataSet getProductDefaultLang(string productId) {
            return base.Channel.getProductDefaultLang(productId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductDefaultLangAsync(string productId) {
            return base.Channel.getProductDefaultLangAsync(productId);
        }
        
        public bool CheckRedemptionLimit(string operatorId, string memberCode, string productId) {
            return base.Channel.CheckRedemptionLimit(operatorId, memberCode, productId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckRedemptionLimitAsync(string operatorId, string memberCode, string productId) {
            return base.Channel.CheckRedemptionLimitAsync(operatorId, memberCode, productId);
        }
        
        public bool CheckRedemptionLimitWithRedemptionQuantity(string operatorId, string memberCode, string productId, int amount) {
            return base.Channel.CheckRedemptionLimitWithRedemptionQuantity(operatorId, memberCode, productId, amount);
        }
        
        public System.Threading.Tasks.Task<bool> CheckRedemptionLimitWithRedemptionQuantityAsync(string operatorId, string memberCode, string productId, int amount) {
            return base.Channel.CheckRedemptionLimitWithRedemptionQuantityAsync(operatorId, memberCode, productId, amount);
        }
        
        public int CheckRedemptionLimitForVIPCategory(string operatorId, string memberCode, string vipCategoryId) {
            return base.Channel.CheckRedemptionLimitForVIPCategory(operatorId, memberCode, vipCategoryId);
        }
        
        public System.Threading.Tasks.Task<int> CheckRedemptionLimitForVIPCategoryAsync(string operatorId, string memberCode, string vipCategoryId) {
            return base.Channel.CheckRedemptionLimitForVIPCategoryAsync(operatorId, memberCode, vipCategoryId);
        }
        
        public System.Data.DataSet getMemberInfo(string operatorId, string memberCode) {
            return base.Channel.getMemberInfo(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberInfoAsync(string operatorId, string memberCode) {
            return base.Channel.getMemberInfoAsync(operatorId, memberCode);
        }
        
        public string getMemberPointLevelFE(string memberId) {
            return base.Channel.getMemberPointLevelFE(memberId);
        }
        
        public System.Threading.Tasks.Task<string> getMemberPointLevelFEAsync(string memberId) {
            return base.Channel.getMemberPointLevelFEAsync(memberId);
        }
        
        public int getMemberPointLevelDiscount(string operatorId, string currencyCode, string pointLevel) {
            return base.Channel.getMemberPointLevelDiscount(operatorId, currencyCode, pointLevel);
        }
        
        public System.Threading.Tasks.Task<int> getMemberPointLevelDiscountAsync(string operatorId, string currencyCode, string pointLevel) {
            return base.Channel.getMemberPointLevelDiscountAsync(operatorId, currencyCode, pointLevel);
        }
        
        public int checkRedemptionLimitDaily(string operatorId, string memberCode, string productId, int amount) {
            return base.Channel.checkRedemptionLimitDaily(operatorId, memberCode, productId, amount);
        }
        
        public System.Threading.Tasks.Task<int> checkRedemptionLimitDailyAsync(string operatorId, string memberCode, string productId, int amount) {
            return base.Channel.checkRedemptionLimitDailyAsync(operatorId, memberCode, productId, amount);
        }
        
        public System.Data.DataSet getMemberPointLevelRange(string operatorId, string currencyCode, long pointsRequired) {
            return base.Channel.getMemberPointLevelRange(operatorId, currencyCode, pointsRequired);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberPointLevelRangeAsync(string operatorId, string currencyCode, long pointsRequired) {
            return base.Channel.getMemberPointLevelRangeAsync(operatorId, currencyCode, pointsRequired);
        }
        
        public int getMemberEarnFE(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberEarnFE(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<int> getMemberEarnFEAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberEarnFEAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public long getMemberPointLevelRequired(string operatorId, string currencyCode, string pointLevel) {
            return base.Channel.getMemberPointLevelRequired(operatorId, currencyCode, pointLevel);
        }
        
        public System.Threading.Tasks.Task<long> getMemberPointLevelRequiredAsync(string operatorId, string currencyCode, string pointLevel) {
            return base.Channel.getMemberPointLevelRequiredAsync(operatorId, currencyCode, pointLevel);
        }
        
        public System.Data.DataSet getMemberSpinWheelFE(string operatorId, string currencyCode, string languageCode) {
            return base.Channel.getMemberSpinWheelFE(operatorId, currencyCode, languageCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEAsync(string operatorId, string currencyCode, string languageCode) {
            return base.Channel.getMemberSpinWheelFEAsync(operatorId, currencyCode, languageCode);
        }
        
        public System.Data.DataSet getMemberSpinWheelFEItem(string operatorId, string currencyCode, string languageCode) {
            return base.Channel.getMemberSpinWheelFEItem(operatorId, currencyCode, languageCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEItemAsync(string operatorId, string currencyCode, string languageCode) {
            return base.Channel.getMemberSpinWheelFEItemAsync(operatorId, currencyCode, languageCode);
        }
        
        public System.Data.DataSet getMemberSpinWheelFEItemByProductId(string memberId, string currencyCode, string languageCode, string productId) {
            return base.Channel.getMemberSpinWheelFEItemByProductId(memberId, currencyCode, languageCode, productId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEItemByProductIdAsync(string memberId, string currencyCode, string languageCode, string productId) {
            return base.Channel.getMemberSpinWheelFEItemByProductIdAsync(memberId, currencyCode, languageCode, productId);
        }
        
        public string addLogSpinWheel(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy) {
            return base.Channel.addLogSpinWheel(operatorId, memberCode, currencyCode, riskId, pointLevel, categoryId, productId, productType, amount, claim, dobPrize, createdBy);
        }
        
        public System.Threading.Tasks.Task<string> addLogSpinWheelAsync(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy) {
            return base.Channel.addLogSpinWheelAsync(operatorId, memberCode, currencyCode, riskId, pointLevel, categoryId, productId, productType, amount, claim, dobPrize, createdBy);
        }
        
        public int updateLogSpinWheel(string logSpinId) {
            return base.Channel.updateLogSpinWheel(logSpinId);
        }
        
        public System.Threading.Tasks.Task<int> updateLogSpinWheelAsync(string logSpinId) {
            return base.Channel.updateLogSpinWheelAsync(logSpinId);
        }
        
        public int getMemberSpinWheelCount(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberSpinWheelCount(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<int> getMemberSpinWheelCountAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberSpinWheelCountAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public int getMemberSpinWheelCountDOB(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberSpinWheelCountDOB(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<int> getMemberSpinWheelCountDOBAsync(string operatorId, string memberCode, string dateFrom, string dateTo) {
            return base.Channel.getMemberSpinWheelCountDOBAsync(operatorId, memberCode, dateFrom, dateTo);
        }
        
        public int getMemberSpinWheelCountDOB_revised(string operatorId, string memberCode, int currentYear) {
            return base.Channel.getMemberSpinWheelCountDOB_revised(operatorId, memberCode, currentYear);
        }
        
        public System.Threading.Tasks.Task<int> getMemberSpinWheelCountDOB_revisedAsync(string operatorId, string memberCode, int currentYear) {
            return base.Channel.getMemberSpinWheelCountDOB_revisedAsync(operatorId, memberCode, currentYear);
        }
        
        public System.Data.DataSet getMemberDOB(string memberId) {
            return base.Channel.getMemberDOB(memberId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberDOBAsync(string memberId) {
            return base.Channel.getMemberDOBAsync(memberId);
        }
        
        public System.Data.DataSet getProductPoint(string operatorId, string productId, string riskId, string currencyCode, string pointLevel) {
            return base.Channel.getProductPoint(operatorId, productId, riskId, currencyCode, pointLevel);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductPointAsync(string operatorId, string productId, string riskId, string currencyCode, string pointLevel) {
            return base.Channel.getProductPointAsync(operatorId, productId, riskId, currencyCode, pointLevel);
        }
        
        public string addRedemptionFreebetRevised(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string currencyCode, 
                    double creditAmt, 
                    int redemptionStatus, 
                    string remarksAdmin, 
                    string spinWheelPrize, 
                    int pointsBefore, 
                    int pointsAwarded, 
                    int pointsAfter, 
                    string actionId) {
            return base.Channel.addRedemptionFreebetRevised(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, pointsBefore, pointsAwarded, pointsAfter, actionId);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionFreebetRevisedAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string currencyCode, 
                    double creditAmt, 
                    int redemptionStatus, 
                    string remarksAdmin, 
                    string spinWheelPrize, 
                    int pointsBefore, 
                    int pointsAwarded, 
                    int pointsAfter, 
                    string actionId) {
            return base.Channel.addRedemptionFreebetRevisedAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, pointsBefore, pointsAwarded, pointsAfter, actionId);
        }
        
        public int getMemberPointsBefore(string operatorId, string memberCode) {
            return base.Channel.getMemberPointsBefore(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<int> getMemberPointsBeforeAsync(string operatorId, string memberCode) {
            return base.Channel.getMemberPointsBeforeAsync(operatorId, memberCode);
        }
        
        public System.Data.DataSet getMemberSpinWheelInfo(string memberId) {
            return base.Channel.getMemberSpinWheelInfo(memberId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelInfoAsync(string memberId) {
            return base.Channel.getMemberSpinWheelInfoAsync(memberId);
        }
        
        public System.Data.DataSet getMemberInfoSpinWheelEligible(string operatorId, string memberCode) {
            return base.Channel.getMemberInfoSpinWheelEligible(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberInfoSpinWheelEligibleAsync(string operatorId, string memberCode) {
            return base.Channel.getMemberInfoSpinWheelEligibleAsync(operatorId, memberCode);
        }
        
        public bool getMemberSpinWheelEligible(string operatorId, string memberCode) {
            return base.Channel.getMemberSpinWheelEligible(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<bool> getMemberSpinWheelEligibleAsync(string operatorId, string memberCode) {
            return base.Channel.getMemberSpinWheelEligibleAsync(operatorId, memberCode);
        }
        
        public int checkSWPrizeMax(string operatorId, string currencyCode, string productId, string dateFrom, string dateTo) {
            return base.Channel.checkSWPrizeMax(operatorId, currencyCode, productId, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<int> checkSWPrizeMaxAsync(string operatorId, string currencyCode, string productId, string dateFrom, string dateTo) {
            return base.Channel.checkSWPrizeMaxAsync(operatorId, currencyCode, productId, dateFrom, dateTo);
        }
        
        public int addAdjustmentAutoCredit(string adjustmentCategoryId, string memberCode, string operatorId, int pointsAdjusted, string remarks, string actionId, string createdBy, int pointsBefore, int pointsAwarded, int pointsAfter) {
            return base.Channel.addAdjustmentAutoCredit(adjustmentCategoryId, memberCode, operatorId, pointsAdjusted, remarks, actionId, createdBy, pointsBefore, pointsAwarded, pointsAfter);
        }
        
        public System.Threading.Tasks.Task<int> addAdjustmentAutoCreditAsync(string adjustmentCategoryId, string memberCode, string operatorId, int pointsAdjusted, string remarks, string actionId, string createdBy, int pointsBefore, int pointsAwarded, int pointsAfter) {
            return base.Channel.addAdjustmentAutoCreditAsync(adjustmentCategoryId, memberCode, operatorId, pointsAdjusted, remarks, actionId, createdBy, pointsBefore, pointsAwarded, pointsAfter);
        }
        
        public string addRedemptionAutoCredit(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt) {
            return base.Channel.addRedemptionAutoCredit(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, spinWheelPrize, redemptionStatus, remarksAdmin, creditAmt);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionAutoCreditAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt) {
            return base.Channel.addRedemptionAutoCreditAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, spinWheelPrize, redemptionStatus, remarksAdmin, creditAmt);
        }
        
        public int getlogSpinWheelSingle(string spinWheelPrize) {
            return base.Channel.getlogSpinWheelSingle(spinWheelPrize);
        }
        
        public System.Threading.Tasks.Task<int> getlogSpinWheelSingleAsync(string spinWheelPrize) {
            return base.Channel.getlogSpinWheelSingleAsync(spinWheelPrize);
        }
        
        public int checklogSpinWheel(string spinWheelPrize, string operatorId, string memberCode) {
            return base.Channel.checklogSpinWheel(spinWheelPrize, operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<int> checklogSpinWheelAsync(string spinWheelPrize, string operatorId, string memberCode) {
            return base.Channel.checklogSpinWheelAsync(spinWheelPrize, operatorId, memberCode);
        }
        
        public System.Data.DataSet getMemberSpinWheelFEItemV2(string operatorId, string memberCode, string languageCode) {
            return base.Channel.getMemberSpinWheelFEItemV2(operatorId, memberCode, languageCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEItemV2Async(string operatorId, string memberCode, string languageCode) {
            return base.Channel.getMemberSpinWheelFEItemV2Async(operatorId, memberCode, languageCode);
        }
        
        public System.Data.DataSet getMemberSpinWheelFEV2(string operatorId, string memberCode) {
            return base.Channel.getMemberSpinWheelFEV2(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelFEV2Async(string operatorId, string memberCode) {
            return base.Channel.getMemberSpinWheelFEV2Async(operatorId, memberCode);
        }
        
        public System.Data.DataSet getMemberSpinWheelWinItem(string operatorId, string memberCode, string languageCode, string productId) {
            return base.Channel.getMemberSpinWheelWinItem(operatorId, memberCode, languageCode, productId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getMemberSpinWheelWinItemAsync(string operatorId, string memberCode, string languageCode, string productId) {
            return base.Channel.getMemberSpinWheelWinItemAsync(operatorId, memberCode, languageCode, productId);
        }
        
        public int checkWinProductPercentage(string productId, string currencyCode) {
            return base.Channel.checkWinProductPercentage(productId, currencyCode);
        }
        
        public System.Threading.Tasks.Task<int> checkWinProductPercentageAsync(string productId, string currencyCode) {
            return base.Channel.checkWinProductPercentageAsync(productId, currencyCode);
        }
        
        public string addLogSpinWheel2(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy, string createdDateTime) {
            return base.Channel.addLogSpinWheel2(operatorId, memberCode, currencyCode, riskId, pointLevel, categoryId, productId, productType, amount, claim, dobPrize, createdBy, createdDateTime);
        }
        
        public System.Threading.Tasks.Task<string> addLogSpinWheel2Async(string operatorId, string memberCode, string currencyCode, string riskId, string pointLevel, string categoryId, string productId, string productType, int amount, bool claim, bool dobPrize, string createdBy, string createdDateTime) {
            return base.Channel.addLogSpinWheel2Async(operatorId, memberCode, currencyCode, riskId, pointLevel, categoryId, productId, productType, amount, claim, dobPrize, createdBy, createdDateTime);
        }
        
        public string addRedemptionFreebet2(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, string createdDateTime) {
            return base.Channel.addRedemptionFreebet2(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, createdDateTime);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionFreebet2Async(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, string createdDateTime) {
            return base.Channel.addRedemptionFreebet2Async(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, createdDateTime);
        }
        
        public string addRedemptionFreebet3(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource) {
            return base.Channel.addRedemptionFreebet3(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, redemptionSource);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionFreebet3Async(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource) {
            return base.Channel.addRedemptionFreebet3Async(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, redemptionSource);
        }
        
        public int updateRedemptionFreebet(string redemptionId, int redemptionStatus) {
            return base.Channel.updateRedemptionFreebet(redemptionId, redemptionStatus);
        }
        
        public System.Threading.Tasks.Task<int> updateRedemptionFreebetAsync(string redemptionId, int redemptionStatus) {
            return base.Channel.updateRedemptionFreebetAsync(redemptionId, redemptionStatus);
        }
        
        public string addRedemptionNormalNew(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource) {
            return base.Channel.addRedemptionNormalNew(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize, redemptionSource);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionNormalNewAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource) {
            return base.Channel.addRedemptionNormalNewAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize, redemptionSource);
        }
        
        public string addRedemptionFreebetNew(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource) {
            return base.Channel.addRedemptionFreebetNew(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, redemptionSource);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionFreebetNewAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string currencyCode, double creditAmt, int redemptionStatus, string remarksAdmin, string spinWheelPrize, int redemptionSource) {
            return base.Channel.addRedemptionFreebetNewAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, currencyCode, creditAmt, redemptionStatus, remarksAdmin, spinWheelPrize, redemptionSource);
        }
        
        public string addRedemptionWishList2New(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource) {
            return base.Channel.addRedemptionWishList2New(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, remarksWishList, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize, redemptionSource);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionWishList2NewAsync(
                    string operatorId, 
                    string memberCode, 
                    string productId, 
                    string categoryId, 
                    string productType, 
                    string riskId, 
                    int pointsRequired, 
                    string createdBy, 
                    string remarksWishList, 
                    string recipientName, 
                    string recipientAddress, 
                    string recipientPostal, 
                    string recipientCity, 
                    string recipientCountry, 
                    string recipientContact, 
                    string spinWheelPrize, 
                    int redemptionSource) {
            return base.Channel.addRedemptionWishList2NewAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, remarksWishList, recipientName, recipientAddress, recipientPostal, recipientCity, recipientCountry, recipientContact, spinWheelPrize, redemptionSource);
        }
        
        public string addRedemptionOnlineNew(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize, int redemptionSource) {
            return base.Channel.addRedemptionOnlineNew(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, aimId, spinWheelPrize, redemptionSource);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionOnlineNewAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string aimId, string spinWheelPrize, int redemptionSource) {
            return base.Channel.addRedemptionOnlineNewAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, aimId, spinWheelPrize, redemptionSource);
        }
        
        public string getCategoryName(string categoryId, string languageCode) {
            return base.Channel.getCategoryName(categoryId, languageCode);
        }
        
        public System.Threading.Tasks.Task<string> getCategoryNameAsync(string categoryId, string languageCode) {
            return base.Channel.getCategoryNameAsync(categoryId, languageCode);
        }
        
        public string addRedemptionAutoCreditNew(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt, int redemptionSource) {
            return base.Channel.addRedemptionAutoCreditNew(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, spinWheelPrize, redemptionStatus, remarksAdmin, creditAmt, redemptionSource);
        }
        
        public System.Threading.Tasks.Task<string> addRedemptionAutoCreditNewAsync(string operatorId, string memberCode, string productId, string categoryId, string productType, string riskId, int pointsRequired, string createdBy, string spinWheelPrize, int redemptionStatus, string remarksAdmin, double creditAmt, int redemptionSource) {
            return base.Channel.addRedemptionAutoCreditNewAsync(operatorId, memberCode, productId, categoryId, productType, riskId, pointsRequired, createdBy, spinWheelPrize, redemptionStatus, remarksAdmin, creditAmt, redemptionSource);
        }
        
        public int GetExpirationPoint(string operatorId, string memberCode) {
            return base.Channel.GetExpirationPoint(operatorId, memberCode);
        }
        
        public System.Threading.Tasks.Task<int> GetExpirationPointAsync(string operatorId, string memberCode) {
            return base.Channel.GetExpirationPointAsync(operatorId, memberCode);
        }
        
        public System.Nullable<int> GetPointExpirationByRiskId(string operatorId, string riskId) {
            return base.Channel.GetPointExpirationByRiskId(operatorId, riskId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> GetPointExpirationByRiskIdAsync(string operatorId, string riskId) {
            return base.Channel.GetPointExpirationByRiskIdAsync(operatorId, riskId);
        }
        
        public System.Data.DataSet GetAging(string operatorId, string memberCode, string riskId) {
            return base.Channel.GetAging(operatorId, memberCode, riskId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAgingAsync(string operatorId, string memberCode, string riskId) {
            return base.Channel.GetAgingAsync(operatorId, memberCode, riskId);
        }
        
        public W88.WebRef.RewardsServices.RedemptionResponse RedemptionFreebet(W88.WebRef.RewardsServices.RedemptionFreebetRequest request) {
            return base.Channel.RedemptionFreebet(request);
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionFreebetAsync(W88.WebRef.RewardsServices.RedemptionFreebetRequest request) {
            return base.Channel.RedemptionFreebetAsync(request);
        }
        
        public W88.WebRef.RewardsServices.RedemptionResponse RedemptionOnline(W88.WebRef.RewardsServices.RedemptionOnlineRequest request) {
            return base.Channel.RedemptionOnline(request);
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionOnlineAsync(W88.WebRef.RewardsServices.RedemptionOnlineRequest request) {
            return base.Channel.RedemptionOnlineAsync(request);
        }
        
        public W88.WebRef.RewardsServices.RedemptionResponse RedemptionNormal(W88.WebRef.RewardsServices.RedemptionNormalRequest request) {
            return base.Channel.RedemptionNormal(request);
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionNormalAsync(W88.WebRef.RewardsServices.RedemptionNormalRequest request) {
            return base.Channel.RedemptionNormalAsync(request);
        }
        
        public W88.WebRef.RewardsServices.RedemptionResponse RedemptionWishlist(W88.WebRef.RewardsServices.RedemptionWishlistRequest request) {
            return base.Channel.RedemptionWishlist(request);
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionResponse> RedemptionWishlistAsync(W88.WebRef.RewardsServices.RedemptionWishlistRequest request) {
            return base.Channel.RedemptionWishlistAsync(request);
        }
        
        public W88.WebRef.RewardsServices.RedemptionCartResponse RedemptionCart(W88.WebRef.RewardsServices.RedemptionCartRequest request) {
            return base.Channel.RedemptionCart(request);
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.RewardsServices.RedemptionCartResponse> RedemptionCartAsync(W88.WebRef.RewardsServices.RedemptionCartRequest request) {
            return base.Channel.RedemptionCartAsync(request);
        }
        
        public W88.WebRef.RewardsServices.ProductResponse GetProducts(W88.WebRef.RewardsServices.ProductRequest request) {
            return base.Channel.GetProducts(request);
        }
        
        public System.Threading.Tasks.Task<W88.WebRef.RewardsServices.ProductResponse> GetProductsAsync(W88.WebRef.RewardsServices.ProductRequest request) {
            return base.Channel.GetProductsAsync(request);
        }
    }
}
