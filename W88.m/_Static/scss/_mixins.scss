//
// Global Mixins'
// ----------------------------------------------

// Mixin to customize scrollbars
// @param {Length} $size - Horizontal scrollbar's height and vertical scrollbar's width
// @param {Color} $foreground-color - Scrollbar's color
// @param {Color} $background-color [mix($primary, white, 75%)] - Scrollbar's color
// @include scrollbars(.5em, slategray);
@mixin scrollbars($sizeScroll, $foreground-color, $background-color: mix($foreground-color, white, 25%)) {
  ::-webkit-scrollbar {
    width:  $sizeScroll;
    height: $sizeScroll;
  }
  ::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }
  ::-webkit-scrollbar-track {
    background: $background-color;
  }
  // For Internet Explorer
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

// Resets the outline when focus.
// For accessibility you need to apply some styling in its place.
@mixin reset-focus {
  outline: 0;
}

// Drop shadows
// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's
// supported browsers that have box shadow capabilities now support it.
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
          box-shadow: $shadow;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin clearFix($display:block) {
  content: ' ';
  display: $display;
  clear: both;
}

%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
// Usage - @extend %clearfix;

// credits: http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/

@function calculateRem($sizeRem) {
  $remSize: $sizeRem / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($sizeRem) {
  font-size: $sizeRem;
  font-size: calculateRem($sizeRem);
}

$image-path: '/_Static/Images' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $sizeImg:false){
  background-image: url(#{$image-path}/#{$name}.svg);
  @if($sizeImg){
    background-size: $sizeImg;
  }
  .no-svg &{
    background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

    @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
      background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
    }
  }
}
// Usage - @include background-image('pattern');

//
// Animations
// ----------------------------------------------

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
     -moz-animation: #{$str};
      -ms-animation: #{$str};
          animation: #{$str};
}
@mixin animation-name($name) {
  -webkit-animation-name: $name;
          animation-name: $name;
}
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
          animation-duration: $duration;
}
@mixin animation-timing-function($timing-function) {
  -webkit-animation-timing-function: $timing-function;
          animation-timing-function: $timing-function;
}
@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
          animation-delay: $delay;
}
@mixin animation-iteration-count($iteration-count) {
  -webkit-animation-iteration-count: $iteration-count;
          animation-iteration-count: $iteration-count;
}
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
          animation-direction: $direction;
}
@mixin animation-fill-mode($fill-mode) {
  -webkit-animation-fill-mode: $fill-mode;
          animation-fill-mode: $fill-mode;
}

// -- BS Transitions
@mixin transition($transition...) {
  -webkit-transition: $transition;
          transition: $transition;
}
@mixin transition-property($transition-property...) {
  -webkit-transition-property: $transition-property;
          transition-property: $transition-property;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration...) {
  -webkit-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
@mixin transition-timing-function($timing-function) {
  -webkit-transition-timing-function: $timing-function;
          transition-timing-function: $timing-function;
}
@mixin transition-transform($transition...) {
  -webkit-transition: -webkit-transform $transition;
     -moz-transition: -moz-transform $transition;
          transition: transform $transition;
}
@mixin translate3d($x, $y, $z) {
  @include transform( translate3d($x, $y, $z) );
}

@mixin transform($transform...) {
  -webkit-transform: $transform;
     -moz-transform: $transform;
       -o-transform: $transform;
          transform: $transform;
}

@mixin transform-style($transform-style...) {
  -webkit-transform-style: $transform-style;
     -moz-transform-style: $transform-style;
       -o-transform-style: $transform-style;
          transform-style: $transform-style;
}

@mixin perspective($perspective...) {
  -webkit-perspective: $perspective;
     -moz-perspective: $perspective;
       -o-perspective: $perspective;
          perspective: $perspective;
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
@mixin backface-visibility($visibility){
  -webkit-backface-visibility: $visibility;
     -moz-backface-visibility: $visibility;
          backface-visibility: $visibility;
}

@mixin filter($filter) {
  -webkit-filter: $filter;
     -moz-filter: $filter;
          filter: $filter;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin background-size($background-size) {
  -webkit-background-size: $background-size;
     -moz-background-size: $background-size;
      -ms-background-size: $background-size;
          background-size: $background-size;
}

@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

@mixin appearance($appearance) {
    -webkit-appearance: $appearance;
       -moz-appearance: $appearance;
            appearance: $appearance;
}

@mixin background-clip($background-clip...) {
  -webkit-background-clip: $background-clip;
     -moz-background-clip: $background-clip;
          background-clip: $background-clip;
}

@mixin translate($translatex, $translatey) {
    transform: translate($translatex,$translatey);
    -webkit-transform: translate($translatex,$translatey);
}

@mixin user-select($user-select) {
  -webkit-user-select: $user-select;
     -moz-user-select: $user-select;
      -ms-user-select: $user-select;
          user-select: $user-select;
}

@mixin text-size-adjust($text-size-adjust) {
  -webkit-user-select: $text-size-adjust;
     -moz-user-select: $text-size-adjust;
      -ms-user-select: $text-size-adjust;
          user-select: $text-size-adjust;
}

// Placeholder text
@mixin placeholder($color: $input-color-placeholder) {
  &::-moz-placeholder { // Firefox
    color: $color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

// http://www.sitepoint.com/building-linear-gradient-mixin-sass/
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background:    -moz-linear-gradient(legacy-direction($direction), $color-stops);
  background:     -ms-linear-gradient(legacy-direction($direction), $color-stops);
  background:         linear-gradient($direction, $color-stops);
}


// Bootstrap - Image Mixins

// Responsive image
@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

// Retina image
@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
  background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path("#{$file-1x}"), "#{$file-1x}"));

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (   min--moz-device-pixel-ratio: 2),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path("#{$file-2x}"), "#{$file-2x}"));
    background-size: $width-1x $height-1x;
  }
}

// Flexbox Mixins
// --------------------------------------------------
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox

@mixin display-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin display-inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
     -moz-flex-direction: $value;
      -ms-flex-direction: $value;
          flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
     -moz-flex-wrap: $value;
  @if $value == nowrap {
      -ms-flex-wrap: none;
  } @else {
      -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
  -webkit-box-flex: $fg;
      -webkit-flex: $fg $fs $fb;
     -moz-box-flex: $fg;
         -moz-flex: $fg $fs $fb;
          -ms-flex: $fg $fs $fb;
              flex: $fg $fs $fb;
}

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
     -moz-flex-flow: $values;
      -ms-flex-flow: $values;
          flex-flow: $values;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
       -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
       -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
       -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
     -moz-align-items: $value;
          align-items: $value;
}

@mixin align-self($value: auto) {
  -webkit-align-self: $value;
     -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
     -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

@mixin justify-content($value: stretch) {
  @if $value == flex-start {
    -webkit-box-pack: start;
       -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
       -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
       -ms-flex-pack: justify;
  } @else {
    -webkit-box-pack: $value;
       -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
     -moz-justify-content: $value;
          justify-content: $value;
}

@mixin flex-order($n) {
  -ms-flex-order: $n;
   -webkit-order: $n;
           order: $n;
  -webkit-box-ordinal-group: $n;
}

@mixin responsive-grid-break($selector, $max-width) {
  @media (max-width: $max-width) {
    #{$selector} {
      -webkit-box-direction: normal;
      -moz-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-orient: vertical;
      -webkit-flex-direction: column;
      -ms-flex-direction: column;
      flex-direction: column;

      .col, .col-10, .col-20, .col-25, .col-33, .col-34, .col-50, .col-66, .col-67, .col-75, .col-80, .col-90 {
        @include flex(1);
        margin-bottom: ($grid-padding-width * 3) / 2;
        margin-left: 0;
        max-width: 100%;
        width: 100%;
      }
    }
  }
}

@mixin bg-gradient() {
  background: rgba(2,49,68,1);
  background: -webkit-linear-gradient(legacy-direction(to bottom),rgba(2,49,68,1) 0, $base-background-color 100%);
  background:    -moz-linear-gradient(legacy-direction(to bottom),rgba(2,49,68,1) 0, $base-background-color 100%);
  background:     -ms-linear-gradient(legacy-direction(to bottom),rgba(2,49,68,1) 0, $base-background-color 100%);
  background:         linear-gradient(to bottom,rgba(2,49,68,1) 0, $base-background-color 100%);
}

@mixin overlay {
  position: absolute;
  top:0; right:0; bottom:0; left:0;
}
